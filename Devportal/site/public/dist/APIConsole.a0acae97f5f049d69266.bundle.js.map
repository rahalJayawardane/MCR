{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/ApiConsole/SelectAppPanel.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/SwaggerUI.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/ApiConsole.jsx"],"names":["withStyles","theme","menuItem","color","palette","getContrastText","background","paper","props","subscriptions","handleChanges","selectedApplication","selectedKeyType","classes","selectedTokenType","display","justifyContent","xs","md","fullWidth","id","select","label","defaultMessage","value","name","onChange","SelectProps","helperText","margin","variant","map","sub","applicationInfo","applicationId","key","className","ml","find","status","disableAuthorizeAndInfoPlugin","wrapComponents","info","authorizeBtn","SwaggerUI","spec","accessTokenProvider","authorizationHeader","api","securitySchemeType","componentProps","validatorUrl","defaultModelsExpandDepth","docExpansion","requestInterceptor","req","url","context","patternToCheck","headers","endsWith","substring","length","includes","splitTokens","split","defaultModelExpandDepth","plugins","propTypes","PropTypes","func","isRequired","string","shape","ApiConsole","React","Component","constructor","super","this","state","showToken","username","password","bind","handleClickShowToken","updateSwagger","updateAccessToken","updateApplication","componentDidMount","apiID","user","AuthManager","getUser","apiData","environments","labels","selectedEnvironment","swagger","accessToken","apiClient","Api","getAPIById","then","apiResponse","obj","endpointURLs","endpoint","environmentName","getSwaggerByAPIIdAndEnvironment","getSwaggerByAPIIdAndLabel","getSwaggerByAPIId","swaggerResponse","getSubscriptions","subscriptionsResponse","list","filter","item","Application","get","application","tokenType","getKeys","appKeys","token","setState","keys","catch","error","serverError","statusCode","response","body","description","btoa","event","target","promiseSwagger","promiseApp","keyType","render","downloadSwagger","JSON","stringify","downloadLink","encodeURIComponent","Typography","titleSub","Progress","isApiKeyEnabled","isBasicAuthEnabled","isOAuthEnabled","prefix","securityScheme","isPrototypedAPI","lifeCycleStatus","toLowerCase","Paper","Grid","container","grid","userNotificationPaper","component","Icon","Box","SelectAppPanel","gutterBottom","TextField","MenuItem","disabled","env","x","usernameField","passwordField","sdefaultMessage","type","InputProps","endAdornment","InputAdornment","position","IconButton","edge","aria-label","onClick","startAdornment","inputAdornmentStart","centerItems","FormControl","RadioGroup","row","FormControlLabel","control","Radio","href","download","Button","size","buttonIcon","swaggerUIPaper","contextType","ApiContext","marginRight","minWidth","spacing","padding","marginTop","marginBottom","paddingRight","marginLeft","paddingTop","paddingBottom","default","width","backgroundColor","custom","apiDetailPages","swaggerUIBackground"],"mappings":"2FAAA,+EA8GeA,gBAtGCC,IAAD,CACXC,SAAU,CACNC,MAAOF,EAAMG,QAAQC,gBAAgBJ,EAAMG,QAAQE,WAAWC,UAoGvDP,CAhGSQ,IACpB,MAAM,cACFC,EADE,cACaC,EADb,oBAC4BC,EAD5B,gBACiDC,EADjD,QACkEC,EADlE,kBAC2EC,GAC7EN,EACJ,OACI,oCACI,kBAAC,IAAD,CAAKO,QAAQ,OAAOC,eAAe,UAC/B,kBAAC,IAAD,CAAMC,GAAI,GAAIC,GAAI,GACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,WAAS,EACTC,GAAG,2BACHC,QAAM,EACNC,MACI,kBAAC,IAAD,CACIC,eAAe,gBACfH,GAAG,wDAGXI,MAAOb,EACPc,KAAK,sBACLC,SAAUhB,EACViB,YAAalB,EACbmB,WACI,kBAAC,IAAD,CACIL,eAAe,+BACfH,GAAG,iEAGXS,OAAO,SACPC,QAAQ,YAEPrB,EAAcsB,IAAKC,GAChB,kBAAC,IAAD,CACIR,MAAOQ,EAAIC,gBAAgBC,cAC3BC,IAAKH,EAAIC,gBAAgBC,cACzBE,UAAWvB,EAAQX,UAElB8B,EAAIC,gBAAgBR,UAMzC,kBAAC,IAAD,CAAMR,GAAI,GAAIC,GAAI,GACU,QAAtBJ,GACE,kBAAC,IAAD,CAAKuB,GAAI,GACL,kBAAC,IAAD,CACIlB,WAAS,EACTC,GAAG,2BACHC,QAAM,EACNC,MACI,kBAAC,IAAD,CACIC,eAAe,WACfH,GAAG,oDAGXI,MAAOZ,EACPa,KAAK,kBACLC,SAAUhB,EACVkB,WACI,kBAAC,IAAD,CACIL,eAAe,2BACfH,GAAG,2DAGXS,OAAO,SACPC,QAAQ,YAEW,MAAjBrB,GAEF,cADDA,EAAc6B,KAAMN,GAAQA,EAAIE,gBAAkBvB,GAAqB4B,QAGtE,kBAAC,IAAD,CAAUf,MAAM,aAAaY,UAAWvB,EAAQX,UAC5C,kBAAC,IAAD,CACIkB,GAAG,oDACHG,eAAe,gBAIvB,kBAAC,IAAD,CAAUC,MAAM,UAAUY,UAAWvB,EAAQX,UACzC,kBAAC,IAAD,CACIkB,GAAG,iDACHG,eAAe,qB,2WC5FvD,MAAMiB,EAAgC,WAClC,MAAO,CACHC,eAAgB,CACZC,KAAM,IAAM,IAAM,KAClBC,aAAc,IAAM,IAAM,QAShCC,EAAapC,IACf,MAAM,KACFqC,EADE,oBACIC,EADJ,oBACyBC,EADzB,IAC8CC,EAD9C,mBACmDC,GACrDzC,EAEE0C,EAAiB,CACnBL,OACAM,aAAc,KACdC,0BAA2B,EAC3BC,aAAc,OACdC,mBAAqBC,IACjB,MAAM,IAAEC,GAAQD,GACV,QAAEE,GAAYT,EACdU,EAAkB,GAAED,MAQ1B,GANIF,EAAII,QAAQZ,GADY,WAAxBA,EACmCD,IACL,UAAvBG,EAC4B,SAAWH,IAEX,UAAYA,IAE/CU,EAAII,SAASF,GACbH,EAAIC,IAAMA,EAAIK,UAAU,EAAGL,EAAIM,OAAS,QACrC,GAAIN,EAAIO,SAASL,EAAiB,KAAM,CAC3C,MAAMM,EAAcR,EAAIS,MAAM,OAC9BV,EAAIC,IAAMQ,EAAYF,OAAS,EAAIE,EAAY,GAAK,IAAMA,EAAY,GAAKA,EAAY,GAE3F,OAAOT,GAEXW,yBAA0B,EAC1BC,QAAS,CAAC3B,IAEd,OAAO,kBAAC,IAAiBU,IAG7BN,EAAUwB,UAAY,CAClBtB,oBAAqBuB,IAAUC,KAAKC,WACpCxB,oBAAqBsB,IAAUG,OAAOD,WACtCvB,IAAKqB,IAAUI,MAAM,CACjBhB,QAASY,IAAUG,OAAOD,aAC3BA,WACH1B,KAAMwB,IAAUG,OAAOD,YAEZ3B,Q,0WC0Cf,MAAM8B,UAAmBC,IAAMC,UAM3BC,YAAYrE,GACRsE,MAAMtE,GACNuE,KAAKC,MAAQ,CACTC,WAAW,EACXhC,mBAAoB,QACpBiC,SAAU,GACVC,SAAU,IAEdJ,KAAKrE,cAAgBqE,KAAKrE,cAAc0E,KAAKL,MAC7CA,KAAKjC,oBAAsBiC,KAAKjC,oBAAoBsC,KAAKL,MACzDA,KAAKM,qBAAuBN,KAAKM,qBAAqBD,KAAKL,MAC3DA,KAAKO,cAAgBP,KAAKO,cAAcF,KAAKL,MAC7CA,KAAKQ,kBAAoBR,KAAKQ,kBAAkBH,KAAKL,MACrDA,KAAKS,kBAAoBT,KAAKS,kBAAkBJ,KAAKL,MAMzDU,oBACI,MAAM,IAAEzC,GAAQ+B,KAAKtB,QACfiC,EAAQ1C,EAAI5B,GACZuE,EAAOC,IAAYC,UACzB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAzF,EACAE,EAGAwF,EACArF,EAFAF,EAAkB,aAItBmE,KAAKqB,UAAY,IAAIC,IACFtB,KAAKqB,UAAUE,WAAWZ,GAGxCa,KAAMC,KACHV,EAAUU,EAAYC,KACVC,eACRX,EAAeD,EAAQY,aAAa3E,IAAK4E,GAAsBA,EAASC,kBAExEd,EAAQE,SACRA,EAASF,EAAQE,OAAOjE,IAAKT,GAAmBA,EAAMG,OAEtDsE,GAAgBA,EAAajC,OAAS,IACrCmC,GAAuBF,EACjBhB,KAAKqB,UAAUS,gCAAgCnB,EAAOO,IACtDD,GAAUA,EAAOlC,OAAS,IAChCmC,GAAuBD,EACjBjB,KAAKqB,UAAUU,0BAA0BpB,EAAOO,IAEhDlB,KAAKqB,UAAUW,kBAAkBrB,KAG/Ca,KAAMS,IACHd,EAAUc,EAAgBP,IACd,MAARd,EACOZ,KAAKqB,UAAUa,iBAAiBvB,GAEhC,OAGda,KAAMW,IACH,GAA6B,MAAzBA,EAIA,IAHAzG,EAAgByG,EAAsBT,IAAIU,KAAKC,OAAQC,GAAyB,cAAhBA,EAAK9E,QAClD,sBAAhB8E,EAAK9E,UAEa9B,EAAcqD,OAAS,EAAG,CAC3CnD,EAAsBF,EAAc,GAAGyB,cACpBoF,IAAYC,IAAI5G,GAG9B4F,KAAMiB,IACH1G,EAAoB0G,EAAYC,UAEzBD,EAAYE,YAEtBnB,KAAMoB,IACCA,EAAQJ,IAAI,YACZ3G,EAAkB,YACfuF,eAAgBwB,EAAQJ,IAAI,WAAWK,QACnCD,EAAQJ,IAAI,gBACnB3G,EAAkB,eACfuF,eAAgBwB,EAAQJ,IAAI,cAAcK,QAGjD7C,KAAK8C,SAAS,CACV7E,IAAK8C,EACLI,UACAzF,gBACAsF,eACAC,SACAC,sBACAtF,sBACAmH,KAAMH,EACN/G,kBACAuF,cACArF,6BAIZiE,KAAK8C,SAAS,CACV7E,IAAK8C,EACLI,UACAzF,gBACAsF,eACAC,SACAC,sBACAtF,sBACAmH,UAlFhBA,EAmFgBlH,kBACAuF,cACArF,2BAIRiE,KAAK8C,SAAS,CACV7E,IAAK8C,EACLI,UACAzF,gBACAsF,eACAC,SACAC,sBACAtF,sBACAmH,UAjGZA,EAkGYlH,kBACAuF,cACArF,wBAIXiH,MAAOC,IAIJjD,KAAK8C,SAAS,CAAEI,YAAc,GAAED,EAAME,gBAAgBF,EAAMG,SAASC,KAAKC,kBAStFhD,uBACI,MAAM,UAAEJ,GAAcF,KAAKC,MAC3BD,KAAK8C,SAAS,CAAE5C,WAAYA,IAShCnC,sBACI,MAAM,YACFqD,EADE,mBACWlD,EADX,SAC+BiC,EAD/B,SACyCC,GAC3CJ,KAAKC,MACT,GAA2B,UAAvB/B,EAAgC,CAEhC,OAAOqF,KADapD,EAAW,IAAMC,GAGzC,OAAOgB,EAQXzF,cAAc6H,GACV,MAAM,OAAEC,GAAWD,GACb,KAAE9G,EAAF,MAAQD,GAAUgH,EACxB,OAAQ/G,GACJ,IAAK,sBACDsD,KAAK8C,SAAS,CAAE,CAACpG,GAAOD,GAASuD,KAAKO,eACtC,MACJ,IAAK,sBACDP,KAAK8C,SAAS,CAAE,CAACpG,GAAOD,GAASuD,KAAKS,mBACtC,MACJ,IAAK,kBACDT,KAAK8C,SAAS,CAAE,CAACpG,GAAOD,GAASuD,KAAKQ,mBACtC,MACJ,IAAK,iBACDR,KAAK8C,SAAS,CAAE5E,mBAAoBzB,IACpC,MACJ,IAAK,WACDuD,KAAK8C,SAAS,CAAE3C,SAAU1D,IAC1B,MACJ,IAAK,WACDuD,KAAK8C,SAAS,CAAE1C,SAAU3D,IAC1B,MACJ,QACIuD,KAAK8C,SAAS,CAAE,CAACpG,GAAOD,KAQpC8D,gBACI,MAAM,oBACFW,EADE,IACmBjD,EADnB,aACwB+C,GAC1BhB,KAAKC,MACT,IAAIyD,GAIIA,EAFJxC,EACIF,EAAahC,SAASkC,GACLlB,KAAKqB,UAAUS,gCAAgC7D,EAAI5B,GAAI6E,GAEvDlB,KAAKqB,UAAUU,0BAA0B9D,EAAI5B,GAAI6E,GAGrDlB,KAAKqB,UAAUW,kBAAkB/D,EAAI5B,KAE3CmF,KAAMS,IACjBjC,KAAK8C,SAAS,CAAE3B,QAASc,EAAgBP,QAQjDlB,oBACI,MAAM,KAAEuC,EAAF,gBAAQlH,GAAoBmE,KAAKC,MACvC,IAAImB,EACA2B,EAAKP,IAAI3G,MACNuF,eAAgB2B,EAAKP,IAAI3G,GAAiBgH,OAEjD7C,KAAK8C,SAAS,CAAE1B,gBAOpBX,oBACI,MAAM,oBAAE7E,EAAF,gBAAuBC,EAAvB,cAAwCH,GAAkBsE,KAAKC,MAC/D0D,EAAapB,IAAYC,IAAI5G,GACnC,IAAIwF,EACAwC,EAEiB,MAAjBlI,GACoC,sBADXA,EAAc6B,KAAMN,GAAQA,EAAIE,gBACrDvB,GAAqB4B,QACzBwC,KAAK8C,SAAS,CAAEjH,gBAAiB,YACjC+H,EAAU,WAEVA,EAAU/H,EAGd8H,EACKnC,KAAMiB,IACHzC,KAAK8C,SAAS,CAAE/G,kBAAmB0G,EAAYC,YACxCD,EAAYE,YAEtBnB,KAAMoB,IACCA,EAAQJ,IAAIoB,MACTxC,eAAgBwB,EAAQJ,IAAIoB,GAASf,OAE5C7C,KAAK8C,SAAS,CAAE1B,cAAa2B,KAAMH,MAQ/CiB,SACI,MAAM,QAAE/H,GAAYkE,KAAKvE,OACnB,IACFwC,EADE,YACGiF,EADH,QACgB/B,EADhB,YACyBC,EADzB,UACsClB,EADtC,cACiDxE,EADjD,oBACgEE,EADhE,gBACqFC,EADrF,oBAEFqF,EAFE,aAEmBF,EAFnB,OAEiCC,EAFjC,mBAEyC/C,EAFzC,SAE6DiC,EAF7D,SAEuEC,EAFvE,kBAEiFrE,GACnFiE,KAAKC,MACHW,EAAOC,IAAYC,UACnBgD,EAAkBC,KAAKC,U,+VAAL,IAAoB7C,IACtC8C,EAAe,iCAAmCC,mBAAmBJ,GAG3E,GAAIZ,EACA,OACI,kBAACiB,EAAA,EAAD,CAAYpH,QAAQ,KAAKM,UAAWvB,EAAQsI,UACvClB,GAKb,GAAW,MAAPjF,GAA0B,MAAXkD,EACf,OAAO,kBAACkD,EAAA,EAAD,MAGX,IAAIC,GAAkB,EAClBC,GAAqB,EACrBC,GAAiB,EACjBxG,EAAsBC,EAAID,oBAAsBC,EAAID,oBAAsB,gBAC1EyG,EAAS,SACTxG,GAAOA,EAAIyG,iBACXJ,EAAkBrG,EAAIyG,eAAe1F,SAAS,WAC9CuF,EAAqBtG,EAAIyG,eAAe1F,SAAS,cACjDwF,EAAiBvG,EAAIyG,eAAe1F,SAAS,UACzCsF,GAA0C,YAAvBpG,IACnBF,EAAsB,SACtByG,EAAS,KAGjB,MAAME,EAAkB1G,EAAI2G,iBAAyD,eAAtC3G,EAAI2G,gBAAgBC,cAEnE,OACI,oCACI,kBAACV,EAAA,EAAD,CAAYpH,QAAQ,KAAKM,UAAWvB,EAAQsI,UACxC,kBAAC,IAAD,CAAkB/H,GAAG,2CAA2CG,eAAe,aAEnF,kBAACsI,EAAA,EAAD,CAAOzH,UAAWvB,EAAQN,OACtB,kBAACuJ,EAAA,EAAD,CAAMC,WAAS,EAAC3H,UAAWvB,EAAQmJ,OAC7BN,IAAoB/D,GAClB,kBAACmE,EAAA,EAAD,CAAMzC,MAAI,EAACnG,GAAI,GACX,kBAAC2I,EAAA,EAAD,CAAOzH,UAAWvB,EAAQoJ,uBACtB,kBAACf,EAAA,EAAD,CAAYpH,QAAQ,KAAKoI,UAAU,MAC/B,kBAACC,EAAA,EAAD,gBACC,IACD,kBAAC,IAAD,CAAkB/I,GAAG,SAASG,eAAe,YAEjD,kBAAC2H,EAAA,EAAD,CAAYgB,UAAU,KAClB,kBAAC,IAAD,CACI9I,GAAG,mCACHG,eAAgB,mLAQlCmI,GAEE,kBAACI,EAAA,EAAD,CAAM7I,GAAI,GAAIC,GAAI,GAAImG,MAAI,GACtB,kBAAC+C,EAAA,EAAD,CAAKrJ,QAAQ,SACR4E,GAAQlF,GAAiBA,EAAcqD,OAAS,GAC7C,kBAACuG,EAAA,EAAD,CACI5J,cAAeA,EACfC,cAAeqE,KAAKrE,cACpBC,oBAAqBA,EACrBC,gBAAiBA,EACjBE,kBAAmBA,IAG1BL,GAA0C,IAAzBA,EAAcqD,QAC5B,kBAACsG,EAAA,EAAD,CAAKrJ,QAAQ,OAAOC,eAAe,UAC/B,kBAACkI,EAAA,EAAD,CAAYpH,QAAQ,QAAQwI,cAAY,GACpC,kBAAC,IAAD,CACIlJ,GAAG,8DACHG,eAAe,yCAM/B,kBAAC6I,EAAA,EAAD,CAAKrJ,QAAQ,OAAOC,eAAe,UAC/B,kBAAC8I,EAAA,EAAD,CAAM7I,GAAI,GAAIC,GAAI,EAAGmG,MAAI,IAClBtB,GAAgBA,EAAajC,OAAS,GACrCkC,GAAUA,EAAOlC,OAAS,IAE9B,kBAACyG,EAAA,EAAD,CACIpJ,WAAS,EACTE,QAAM,EACNC,MACI,kBAAC,IAAD,CACIC,eAAe,cACfH,GAAG,wCAGXI,MAAOyE,EACPxE,KAAK,sBACLC,SAAUqD,KAAKrE,cACfkB,WACI,kBAAC,IAAD,CACIL,eAAe,+BACfH,GAAG,8DAGXS,OAAO,SACPC,QAAQ,YAEPiE,GAAgBA,EAAajC,OAAS,GACnC,kBAAC0G,EAAA,EAAD,CAAUhJ,MAAM,GAAGiJ,UAAQ,EAACrI,UAAWvB,EAAQX,UAC3C,4BACI,kBAAC,IAAD,CACIkB,GAAG,eACHG,eAAe,mBAK9BwE,GACGA,EAAahE,IAAK2I,GACd,kBAACF,EAAA,EAAD,CAAUhJ,MAAOkJ,EAAKvI,IAAKuI,EAAKtI,UAAWvB,EAAQX,UAC9CwK,IAGZ1E,GAAUA,EAAOlC,OAAS,GACvB,kBAAC0G,EAAA,EAAD,CAAUhJ,MAAM,GAAGiJ,UAAQ,EAACrI,UAAWvB,EAAQX,UAC3C,4BACI,kBAAC,IAAD,CACIkB,GAAG,iBACHG,eAAe,oBAK9ByE,GACGA,EAAOjE,IAAKT,GACR,kBAACkJ,EAAA,EAAD,CACIhJ,MAAOF,EACPa,IAAKb,EACLc,UAAWvB,EAAQX,UAElBoB,OAQzB,kBAAC8I,EAAA,EAAD,CAAKrJ,QAAQ,QAAQC,eAAe,UAChC,kBAAC8I,EAAA,EAAD,CAAMa,EAAG,GAAIzJ,GAAI,EAAGkB,UAAWvB,EAAQ4G,UAAWJ,MAAI,GAC1B,UAAvBpE,EACG,oCACI,kBAACsH,EAAA,EAAD,CACI1I,OAAO,SACPC,QAAQ,WACRM,UAAWvB,EAAQ+J,cACnBtJ,MACI,kBAAC,IAAD,CAAkBF,GAAG,WAAWG,eAAe,aAEnDE,KAAK,WACLC,SAAUqD,KAAKrE,cACfc,MAAO0D,GAAY,KAEvB,kBAACqF,EAAA,EAAD,CACI1I,OAAO,SACPC,QAAQ,WACRM,UAAWvB,EAAQgK,cACnBvJ,MACI,kBAAC,IAAD,CAAkBF,GAAG,WAAWG,eAAe,aAEnDE,KAAK,WACLC,SAAUqD,KAAKrE,cACfc,MAAO2D,GAAY,MAI3B,kBAACoF,EAAA,EAAD,CACIpJ,WAAS,EACTU,OAAO,SACPC,QAAQ,WACRR,MACI,kBAAC,IAAD,CACIF,GAAG,eACH0J,gBAAgB,iBAGxBrJ,KAAK,cACLC,SAAUqD,KAAKrE,cACfqK,KAAM9F,EAAY,OAAS,WAC3BzD,MAAO2E,GAAe,GACtBvE,WACI,kBAAC,IAAD,CACIR,GAAG,qBACHG,eAAe,uBAGvByJ,WAAY,CACRC,aACI,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OACrB,kBAACC,EAAA,EAAD,CACIC,KAAK,MACLC,aAAW,0BACXC,QAASxG,KAAKM,sBAEbJ,EAAY,kBAACkF,EAAA,EAAD,uBACP,kBAACA,EAAA,EAAD,qBAIlBqB,eACI,kBAACN,EAAA,EAAD,CACI9I,UAAWvB,EAAQ4K,oBACnBN,SAAS,SAEP,GAAEpI,MAAwByG,SAOpD,kBAACM,EAAA,EAAD,CAAMa,EAAG,GAAIzJ,GAAI,EAAGkB,UAAWvB,EAAQ6K,cACjCrC,GAAmBC,GAAsBC,IACvC,kBAACoC,EAAA,EAAD,CAAazB,UAAU,YACnB,kBAAC0B,EAAA,EAAD,CACInK,KAAK,iBACLD,MAAOyB,EACPvB,SAAUqD,KAAKrE,cACfmL,KAAG,GAEFtC,GACG,kBAACuC,EAAA,EAAD,CACItK,MAAM,QACNuK,QAAS,kBAACC,EAAA,EAAD,MACT1K,MAAM,UAGbgI,GACG,kBAACwC,EAAA,EAAD,CACItK,MAAM,QACNuK,QAAS,kBAACC,EAAA,EAAD,MACT1K,MAAM,UAGb+H,GACG,kBAACyC,EAAA,EAAD,CACItK,MAAM,UACNuK,QAAS,kBAACC,EAAA,EAAD,MACT1K,MAAM,kBAY9C,kBAACwI,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM7I,GAAI,GAAIoG,MAAI,IAClB,kBAACyC,EAAA,EAAD,CAAM7I,GAAI,EAAGoG,MAAI,GACb,uBAAG4E,KAAMjD,EAAckD,SAtQ9B,gBAuQW,kBAACC,EAAA,EAAD,CAAQC,KAAK,SACT,kBAAC,IAAD,CAAsBhK,UAAWvB,EAAQwL,aACzC,kBAAC,IAAD,CACIjL,GAAG,sDACHG,eAAe,oCAQ3C,kBAACsI,EAAA,EAAD,CAAOzH,UAAWvB,EAAQyL,gBACtB,kBAAC,EAAD,CACItJ,IAAK+B,KAAKC,MAAMhC,IAChBF,oBAAqBiC,KAAKjC,oBAC1BD,KAAMqD,EACNnD,oBAAqBA,EACrBE,mBAAoBA,OAQ5CyB,EAAWN,UAAY,CACnBvD,QAASwD,IAAUI,MAAM,CACrBlE,MAAO8D,IAAUG,OAAOD,WACxB4E,SAAU9E,IAAUG,OAAOD,WAC3ByF,KAAM3F,IAAUG,OAAOD,WACvB0F,sBAAuB5F,IAAUG,OAAOD,WACxCkH,oBAAqBpH,IAAUG,OAAOD,WACtC8H,WAAYhI,IAAUG,OAAOD,WAC7BmH,YAAarH,IAAUG,OAAOD,aAC/BA,YAGPG,EAAW6H,YAAcC,IAEVxM,sBAvoBCC,IAAD,CACXoM,WAAY,CACRI,YAAa,IAEjBf,YAAa,CACT7J,OAAQ,QAEZ4F,UAAW,CACP5F,OAAQ,OACRd,QAAS,QAEb0K,oBAAqB,CACjBiB,SAAUzM,EAAM0M,QAAQ,KAE5BpM,MAAO,CACHsB,OAAQ5B,EAAM0M,QAAQ,GACtBC,QAAS3M,EAAM0M,QAAQ,GACvB,oDAAqD,CACjDxM,MAAOF,EAAMG,QAAQC,gBAAgBJ,EAAMG,QAAQE,WAAWC,SAGtEyJ,KAAM,CACF6C,UAAW5M,EAAM0M,QAAQ,GACzBG,aAAc7M,EAAM0M,QAAQ,GAC5BI,aAAc9M,EAAM0M,QAAQ,GAC5B3L,eAAgB,UAEpBiJ,sBAAuB,CACnB2C,QAAS3M,EAAM0M,QAAQ,IAE3BxD,SAAU,CACN6D,WAAY/M,EAAM0M,QAAQ,GAC1BM,WAAYhN,EAAM0M,QAAQ,GAC1BO,cAAejN,EAAM0M,QAAQ,GAC7BxM,MAAOF,EAAMG,QAAQC,gBAAgBJ,EAAMG,QAAQE,WAAW6M,UAElEvC,cAAe,CACXwC,MAAO,QAEXvC,cAAe,CACXuC,MAAO,OACPJ,WAAY/M,EAAM0M,QAAQ,IAE9BzM,SAAU,CACNC,MAAOF,EAAMG,QAAQC,gBAAgBJ,EAAMG,QAAQE,WAAWC,QAElE+L,eAAgB,CACZe,gBAAiBpN,EAAMqN,OAAOC,eAAeC,uBAwlBtCxN,CAAmB0E","file":"APIConsole.a0acae97f5f049d69266.bundle.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = (theme) => ({\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n});\n\nconst SelectAppPanel = (props) => {\n    const {\n        subscriptions, handleChanges, selectedApplication, selectedKeyType, classes, selectedTokenType,\n    } = props;\n    return (\n        <>\n            <Box display='flex' justifyContent='center'>\n                <Grid xs={12} md={3}>\n                    <Box>\n                        <TextField\n                            fullWidth\n                            id='outlined-select-currency'\n                            select\n                            label={(\n                                <FormattedMessage\n                                    defaultMessage='Appplications'\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                                />\n                            )}\n                            value={selectedApplication}\n                            name='selectedApplication'\n                            onChange={handleChanges}\n                            SelectProps={subscriptions}\n                            helperText={(\n                                <FormattedMessage\n                                    defaultMessage='Please select an application'\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.select.an.application'\n                                />\n                            )}\n                            margin='normal'\n                            variant='outlined'\n                        >\n                            {subscriptions.map((sub) => (\n                                <MenuItem\n                                    value={sub.applicationInfo.applicationId}\n                                    key={sub.applicationInfo.applicationId}\n                                    className={classes.menuItem}\n                                >\n                                    {sub.applicationInfo.name}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    </Box>\n                </Grid>\n                <Grid xs={12} md={3}>\n                    {(selectedTokenType !== 'JWT') && (\n                        <Box ml={2}>\n                            <TextField\n                                fullWidth\n                                id='outlined-select-currency'\n                                select\n                                label={(\n                                    <FormattedMessage\n                                        defaultMessage='Key Type'\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.key.type'\n                                    />\n                                )}\n                                value={selectedKeyType}\n                                name='selectedKeyType'\n                                onChange={handleChanges}\n                                helperText={(\n                                    <FormattedMessage\n                                        defaultMessage='Please select a key type'\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.select.key.type'\n                                    />\n                                )}\n                                margin='normal'\n                                variant='outlined'\n                            >\n                                {(subscriptions != null\n                            && subscriptions.find((sub) => sub.applicationId === selectedApplication).status\n                            === 'UNBLOCKED')\n                            && (\n                                <MenuItem value='PRODUCTION' className={classes.menuItem}>\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.production'\n                                        defaultMessage='PRODUCTION'\n                                    />\n                                </MenuItem>\n                            )}\n                                <MenuItem value='SANDBOX' className={classes.menuItem}>\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.sandbox'\n                                        defaultMessage='SANDBOX'\n                                    />\n                                </MenuItem>\n                            </TextField>\n                        </Box>\n                    )}\n                </Grid>\n            </Box>\n\n        </>\n    );\n};\n\nexport default withStyles(styles)(SelectAppPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport 'swagger-ui-react/swagger-ui.css';\nimport SwaggerUILib from 'swagger-ui-react';\n\nconst disableAuthorizeAndInfoPlugin = function () {\n    return {\n        wrapComponents: {\n            info: () => () => null,\n            authorizeBtn: () => () => null,\n        },\n    };\n};\n/**\n *\n * @class SwaggerUI\n * @extends {Component}\n */\nconst SwaggerUI = (props) => {\n    const {\n        spec, accessTokenProvider, authorizationHeader, api, securitySchemeType,\n    } = props;\n\n    const componentProps = {\n        spec,\n        validatorUrl: null,\n        defaultModelsExpandDepth: -1,\n        docExpansion: 'list',\n        requestInterceptor: (req) => {\n            const { url } = req;\n            const { context } = api;\n            const patternToCheck = `${context}/*`;\n            if (authorizationHeader === 'apikey') {\n                req.headers[authorizationHeader] = accessTokenProvider();\n            } else if (securitySchemeType === 'BASIC') {\n                req.headers[authorizationHeader] = 'Basic ' + accessTokenProvider();\n            } else {\n                req.headers[authorizationHeader] = 'Bearer ' + accessTokenProvider();\n            }\n            if (url.endsWith(patternToCheck)) {\n                req.url = url.substring(0, url.length - 2);\n            } else if (url.includes(patternToCheck + '?')) { // Check for query parameters.\n                const splitTokens = url.split('/*?');\n                req.url = splitTokens.length > 1 ? splitTokens[0] + '?' + splitTokens[1] : splitTokens[0];\n            }\n            return req;\n        },\n        defaultModelExpandDepth: -1,\n        plugins: [disableAuthorizeAndInfoPlugin],\n    };\n    return <SwaggerUILib {...componentProps} />;\n};\n\nSwaggerUI.propTypes = {\n    accessTokenProvider: PropTypes.func.isRequired,\n    authorizationHeader: PropTypes.string.isRequired,\n    api: PropTypes.shape({\n        context: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.string.isRequired,\n};\nexport default SwaggerUI;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    Radio, RadioGroup, FormControlLabel, FormControl,\n} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport Box from '@material-ui/core/Box';\nimport { ApiContext } from '../ApiContext';\nimport Progress from '../../../Shared/Progress';\nimport Api from '../../../../data/api';\nimport SwaggerUI from './SwaggerUI';\nimport Application from '../../../../data/Application';\nimport SelectAppPanel from './SelectAppPanel';\n/**\n * @inheritdoc\n * @param {*} theme theme\n */\nconst styles = (theme) => ({\n    buttonIcon: {\n        marginRight: 10,\n    },\n    centerItems: {\n        margin: 'auto',\n    },\n    tokenType: {\n        margin: 'auto',\n        display: 'flex',\n    },\n    inputAdornmentStart: {\n        minWidth: theme.spacing(18),\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    userNotificationPaper: {\n        padding: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    usernameField: {\n        width: '100%',\n    },\n    passwordField: {\n        width: '100%',\n        marginLeft: theme.spacing(1),\n    },\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    swaggerUIPaper: {\n        backgroundColor: theme.custom.apiDetailPages.swaggerUIBackground,\n    },\n});\n/**\n *\n *\n * @class ApiConsole\n * @extends {React.Component}\n */\nclass ApiConsole extends React.Component {\n    /**\n     *Creates an instance of ApiConsole.\n     * @param {*} props properties\n     * @memberof ApiConsole\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            showToken: false,\n            securitySchemeType: 'OAUTH',\n            username: '',\n            password: '',\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.accessTokenProvider = this.accessTokenProvider.bind(this);\n        this.handleClickShowToken = this.handleClickShowToken.bind(this);\n        this.updateSwagger = this.updateSwagger.bind(this);\n        this.updateAccessToken = this.updateAccessToken.bind(this);\n        this.updateApplication = this.updateApplication.bind(this);\n    }\n\n    /**\n     * @memberof ApiConsole\n     */\n    componentDidMount() {\n        const { api } = this.context;\n        const apiID = api.id;\n        const user = AuthManager.getUser();\n        let apiData;\n        let environments;\n        let labels;\n        let selectedEnvironment;\n        let swagger;\n        let subscriptions;\n        let selectedApplication;\n        let keys;\n        let selectedKeyType = 'PRODUCTION';\n        let accessToken;\n        let selectedTokenType;\n\n        this.apiClient = new Api();\n        const promiseAPI = this.apiClient.getAPIById(apiID);\n\n        promiseAPI\n            .then((apiResponse) => {\n                apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    environments = apiData.endpointURLs.map((endpoint) => { return endpoint.environmentName; });\n                }\n                if (apiData.labels) {\n                    labels = apiData.labels.map((label) => { return label.name; });\n                }\n                if (environments && environments.length > 0) {\n                    [selectedEnvironment] = environments;\n                    return this.apiClient.getSwaggerByAPIIdAndEnvironment(apiID, selectedEnvironment);\n                } else if (labels && labels.length > 0) {\n                    [selectedEnvironment] = labels;\n                    return this.apiClient.getSwaggerByAPIIdAndLabel(apiID, selectedEnvironment);\n                } else {\n                    return this.apiClient.getSwaggerByAPIId(apiID);\n                }\n            })\n            .then((swaggerResponse) => {\n                swagger = swaggerResponse.obj;\n                if (user != null) {\n                    return this.apiClient.getSubscriptions(apiID);\n                } else {\n                    return null;\n                }\n            })\n            .then((subscriptionsResponse) => {\n                if (subscriptionsResponse != null) {\n                    subscriptions = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n                    || item.status === 'PROD_ONLY_BLOCKED');\n\n                    if (subscriptions && subscriptions.length > 0) {\n                        selectedApplication = subscriptions[0].applicationId;\n                        const promiseApp = Application.get(selectedApplication);\n\n                        promiseApp\n                            .then((application) => {\n                                selectedTokenType = application.tokenType;\n\n                                return application.getKeys();\n                            })\n                            .then((appKeys) => {\n                                if (appKeys.get('SANDBOX')) {\n                                    selectedKeyType = 'SANDBOX';\n                                    ({ accessToken } = appKeys.get('SANDBOX').token);\n                                } else if (appKeys.get('PRODUCTION')) {\n                                    selectedKeyType = 'PRODUCTION';\n                                    ({ accessToken } = appKeys.get('PRODUCTION').token);\n                                }\n\n                                this.setState({\n                                    api: apiData,\n                                    swagger,\n                                    subscriptions,\n                                    environments,\n                                    labels,\n                                    selectedEnvironment,\n                                    selectedApplication,\n                                    keys: appKeys,\n                                    selectedKeyType,\n                                    accessToken,\n                                    selectedTokenType,\n                                });\n                            });\n                    } else {\n                        this.setState({\n                            api: apiData,\n                            swagger,\n                            subscriptions,\n                            environments,\n                            labels,\n                            selectedEnvironment,\n                            selectedApplication,\n                            keys,\n                            selectedKeyType,\n                            accessToken,\n                            selectedTokenType,\n                        });\n                    }\n                } else {\n                    this.setState({\n                        api: apiData,\n                        swagger,\n                        subscriptions,\n                        environments,\n                        labels,\n                        selectedEnvironment,\n                        selectedApplication,\n                        keys,\n                        selectedKeyType,\n                        accessToken,\n                        selectedTokenType,\n                    });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                this.setState({ serverError: `${error.statusCode} - ${error.response.body.description}` });\n            });\n    }\n\n    /**\n     *\n     * Handle onClick of shown access token\n     * @memberof ApiConsole\n     */\n    handleClickShowToken() {\n        const { showToken } = this.state;\n        this.setState({ showToken: !showToken });\n    }\n\n    /**\n     *\n     * Provids the access token to the Swagger UI\n     * @returns {*} access token\n     * @memberof ApiConsole\n     */\n    accessTokenProvider() {\n        const {\n            accessToken, securitySchemeType, username, password,\n        } = this.state;\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        return accessToken;\n    }\n\n    /**\n     * Handle onChange of inputs\n     * @param {*} event event\n     * @memberof ApiConsole\n     */\n    handleChanges(event) {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedEnvironment':\n                this.setState({ [name]: value }, this.updateSwagger);\n                break;\n            case 'selectedApplication':\n                this.setState({ [name]: value }, this.updateApplication);\n                break;\n            case 'selectedKeyType':\n                this.setState({ [name]: value }, this.updateAccessToken);\n                break;\n            case 'securityScheme':\n                this.setState({ securitySchemeType: value });\n                break;\n            case 'username':\n                this.setState({ username: value });\n                break;\n            case 'password':\n                this.setState({ password: value });\n                break;\n            default:\n                this.setState({ [name]: value });\n        }\n    }\n\n    /**\n     * Load the swagger file of the selected environemnt\n     * @memberof ApiConsole\n     */\n    updateSwagger() {\n        const {\n            selectedEnvironment, api, environments,\n        } = this.state;\n        let promiseSwagger;\n\n        if (selectedEnvironment) {\n            if (environments.includes(selectedEnvironment)) {\n                promiseSwagger = this.apiClient.getSwaggerByAPIIdAndEnvironment(api.id, selectedEnvironment);\n            } else {\n                promiseSwagger = this.apiClient.getSwaggerByAPIIdAndLabel(api.id, selectedEnvironment);\n            }\n        } else {\n            promiseSwagger = this.apiClient.getSwaggerByAPIId(api.id);\n        }\n        promiseSwagger.then((swaggerResponse) => {\n            this.setState({ swagger: swaggerResponse.obj });\n        });\n    }\n\n    /**\n     * Load the access token for given key type\n     * @memberof ApiConsole\n     */\n    updateAccessToken() {\n        const { keys, selectedKeyType } = this.state;\n        let accessToken;\n        if (keys.get(selectedKeyType)) {\n            ({ accessToken } = keys.get(selectedKeyType).token);\n        }\n        this.setState({ accessToken });\n    }\n\n    /**\n     * Load the selected application information\n     * @memberof ApiConsole\n     */\n    updateApplication() {\n        const { selectedApplication, selectedKeyType, subscriptions } = this.state;\n        const promiseApp = Application.get(selectedApplication);\n        let accessToken;\n        let keyType;\n\n        if (subscriptions != null && subscriptions.find((sub) => sub.applicationId\n            === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n            this.setState({ selectedKeyType: 'SANDBOX' });\n            keyType = 'SANDBOX';\n        } else {\n            keyType = selectedKeyType;\n        }\n\n        promiseApp\n            .then((application) => {\n                this.setState({ selectedTokenType: application.tokenType });\n                return application.getKeys();\n            })\n            .then((appKeys) => {\n                if (appKeys.get(keyType)) {\n                    ({ accessToken } = appKeys.get(keyType).token);\n                }\n                this.setState({ accessToken, keys: appKeys });\n            });\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof ApiConsole\n     */\n    render() {\n        const { classes } = this.props;\n        const {\n            api, serverError, swagger, accessToken, showToken, subscriptions, selectedApplication, selectedKeyType,\n            selectedEnvironment, environments, labels, securitySchemeType, username, password, selectedTokenType,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const downloadSwagger = JSON.stringify({ ...swagger });\n        const downloadLink = 'data:text/json;charset=utf-8, ' + encodeURIComponent(downloadSwagger);\n        const fileName = 'swagger.json';\n\n        if (serverError) {\n            return (\n                <Typography variant='h4' className={classes.titleSub}>\n                    {serverError}\n                </Typography>\n            );\n        }\n\n        if (api == null || swagger == null) {\n            return <Progress />;\n        }\n\n        let isApiKeyEnabled = false;\n        let isBasicAuthEnabled = false;\n        let isOAuthEnabled = false;\n        let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n        let prefix = 'Bearer';\n        if (api && api.securityScheme) {\n            isApiKeyEnabled = api.securityScheme.includes('api_key');\n            isBasicAuthEnabled = api.securityScheme.includes('basic_auth');\n            isOAuthEnabled = api.securityScheme.includes('oauth2');\n            if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n                authorizationHeader = 'apikey';\n                prefix = '';\n            }\n        }\n        const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n\n        return (\n            <>\n                <Typography variant='h4' className={classes.titleSub}>\n                    <FormattedMessage id='Apis.Details.ApiConsole.ApiConsole.title' defaultMessage='Try Out' />\n                </Typography>\n                <Paper className={classes.paper}>\n                    <Grid container className={classes.grid}>\n                        {!isPrototypedAPI && !user && (\n                            <Grid item md={6}>\n                                <Paper className={classes.userNotificationPaper}>\n                                    <Typography variant='h5' component='h3'>\n                                        <Icon>warning</Icon>\n                                        {' '}\n                                        <FormattedMessage id='notice' defaultMessage='Notice' />\n                                    </Typography>\n                                    <Typography component='p'>\n                                        <FormattedMessage\n                                            id='api.console.require.access.token'\n                                            defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                        />\n                                    </Typography>\n                                </Paper>\n                            </Grid>\n                        )}\n                        {!isPrototypedAPI\n                        && (\n                            <Grid xs={12} md={12} item>\n                                <Box display='block'>\n                                    {user && subscriptions && subscriptions.length > 0 && (\n                                        <SelectAppPanel\n                                            subscriptions={subscriptions}\n                                            handleChanges={this.handleChanges}\n                                            selectedApplication={selectedApplication}\n                                            selectedKeyType={selectedKeyType}\n                                            selectedTokenType={selectedTokenType}\n                                        />\n                                    )}\n                                    {subscriptions && subscriptions.length === 0 && (\n                                        <Box display='flex' justifyContent='center'>\n                                            <Typography variant='body1' gutterBottom>\n                                                <FormattedMessage\n                                                    id='Apis.Details.ApiConsole.ApiConsole.subscribe.to.application'\n                                                    defaultMessage='Please subscribe to an application'\n                                                />\n                                            </Typography>\n                                        </Box>\n\n                                    )}\n                                    <Box display='flex' justifyContent='center'>\n                                        <Grid xs={12} md={6} item>\n                                            {((environments && environments.length > 0)\n                                            || (labels && labels.length > 0))\n                                        && (\n                                            <TextField\n                                                fullWidth\n                                                select\n                                                label={(\n                                                    <FormattedMessage\n                                                        defaultMessage='Environment'\n                                                        id='Apis.Details.ApiConsole.environment'\n                                                    />\n                                                )}\n                                                value={selectedEnvironment}\n                                                name='selectedEnvironment'\n                                                onChange={this.handleChanges}\n                                                helperText={(\n                                                    <FormattedMessage\n                                                        defaultMessage='Please select an environment'\n                                                        id='Apis.Details.ApiConsole.SelectAppPanel.select.environment'\n                                                    />\n                                                )}\n                                                margin='normal'\n                                                variant='outlined'\n                                            >\n                                                {environments && environments.length > 0 && (\n                                                    <MenuItem value='' disabled className={classes.menuItem}>\n                                                        <em>\n                                                            <FormattedMessage\n                                                                id='api.gateways'\n                                                                defaultMessage='API Gateways'\n                                                            />\n                                                        </em>\n                                                    </MenuItem>\n                                                )}\n                                                {environments && (\n                                                    environments.map((env) => (\n                                                        <MenuItem value={env} key={env} className={classes.menuItem}>\n                                                            {env}\n                                                        </MenuItem>\n                                                    )))}\n                                                {labels && labels.length > 0 && (\n                                                    <MenuItem value='' disabled className={classes.menuItem}>\n                                                        <em>\n                                                            <FormattedMessage\n                                                                id='micro.gateways'\n                                                                defaultMessage='Microgateways'\n                                                            />\n                                                        </em>\n                                                    </MenuItem>\n                                                )}\n                                                {labels && (\n                                                    labels.map((label) => (\n                                                        <MenuItem\n                                                            value={label}\n                                                            key={label}\n                                                            className={classes.menuItem}\n                                                        >\n                                                            {label}\n                                                        </MenuItem>\n                                                    ))\n                                                )}\n                                            </TextField>\n                                        )}\n                                        </Grid>\n                                    </Box>\n                                    <Box display='block' justifyContent='center'>\n                                        <Grid x={12} md={6} className={classes.tokenType} item>\n                                            {securitySchemeType === 'BASIC' ? (\n                                                <>\n                                                    <TextField\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                        className={classes.usernameField}\n                                                        label={\n                                                            <FormattedMessage id='username' defaultMessage='Username' />\n                                                        }\n                                                        name='username'\n                                                        onChange={this.handleChanges}\n                                                        value={username || ''}\n                                                    />\n                                                    <TextField\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                        className={classes.passwordField}\n                                                        label={\n                                                            <FormattedMessage id='password' defaultMessage='Password' />\n                                                        }\n                                                        name='password'\n                                                        onChange={this.handleChanges}\n                                                        value={password || ''}\n                                                    />\n                                                </>\n                                            ) : (\n                                                <TextField\n                                                    fullWidth\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                    label={(\n                                                        <FormattedMessage\n                                                            id='access.token'\n                                                            sdefaultMessage='Access Token'\n                                                        />\n                                                    )}\n                                                    name='accessToken'\n                                                    onChange={this.handleChanges}\n                                                    type={showToken ? 'text' : 'password'}\n                                                    value={accessToken || ''}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            id='enter.access.token'\n                                                            defaultMessage='Enter access Token'\n                                                        />\n                                                    )}\n                                                    InputProps={{\n                                                        endAdornment: (\n                                                            <InputAdornment position='end'>\n                                                                <IconButton\n                                                                    edge='end'\n                                                                    aria-label='Toggle token visibility'\n                                                                    onClick={this.handleClickShowToken}\n                                                                >\n                                                                    {showToken ? <Icon>visibility_off</Icon>\n                                                                        : <Icon>visibility</Icon>}\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        ),\n                                                        startAdornment: (\n                                                            <InputAdornment\n                                                                className={classes.inputAdornmentStart}\n                                                                position='start'\n                                                            >\n                                                                {`${authorizationHeader}: ${prefix}`}\n                                                            </InputAdornment>\n                                                        ),\n                                                    }}\n                                                />\n                                            )}\n                                        </Grid>\n                                        <Grid x={12} md={6} className={classes.centerItems}>\n                                            {(isApiKeyEnabled || isBasicAuthEnabled || isOAuthEnabled) && (\n                                                <FormControl component='fieldset'>\n                                                    <RadioGroup\n                                                        name='securityScheme'\n                                                        value={securitySchemeType}\n                                                        onChange={this.handleChanges}\n                                                        row\n                                                    >\n                                                        {isOAuthEnabled && (\n                                                            <FormControlLabel\n                                                                value='OAUTH'\n                                                                control={<Radio />}\n                                                                label='OAuth'\n                                                            />\n                                                        )}\n                                                        {isBasicAuthEnabled && (\n                                                            <FormControlLabel\n                                                                value='BASIC'\n                                                                control={<Radio />}\n                                                                label='Basic'\n                                                            />\n                                                        )}\n                                                        {isApiKeyEnabled && (\n                                                            <FormControlLabel\n                                                                value='API-KEY'\n                                                                control={<Radio />}\n                                                                label='API Key'\n                                                            />\n                                                        )}\n                                                    </RadioGroup>\n                                                </FormControl>\n                                            )}\n                                        </Grid>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        )}\n\n                        <Grid container>\n                            <Grid xs={10} item />\n                            <Grid xs={2} item>\n                                <a href={downloadLink} download={fileName}>\n                                    <Button size='small'>\n                                        <CloudDownloadRounded className={classes.buttonIcon} />\n                                        <FormattedMessage\n                                            id='Apis.Details.APIConsole.APIConsole.download.swagger'\n                                            defaultMessage='Swagger ( /swagger.json )'\n                                        />\n                                    </Button>\n                                </a>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n                <Paper className={classes.swaggerUIPaper}>\n                    <SwaggerUI\n                        api={this.state.api}\n                        accessTokenProvider={this.accessTokenProvider}\n                        spec={swagger}\n                        authorizationHeader={authorizationHeader}\n                        securitySchemeType={securitySchemeType}\n                    />\n                </Paper>\n            </>\n        );\n    }\n}\n\nApiConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        inputAdornmentStart: PropTypes.string.isRequired,\n        buttonIcon: PropTypes.string.isRequired,\n        centerItems: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nApiConsole.contextType = ApiContext;\n\nexport default withStyles(styles)(ApiConsole);\n"],"sourceRoot":""}