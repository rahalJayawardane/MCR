{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/ApiConsole/SelectAppPanel.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLAuthentication.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLUI.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLConsole.jsx"],"names":["withStyles","theme","menuItem","color","palette","getContrastText","background","paper","props","subscriptions","handleChanges","selectedApplication","selectedKeyType","classes","selectedTokenType","display","justifyContent","xs","md","fullWidth","id","select","label","defaultMessage","value","name","onChange","SelectProps","helperText","margin","variant","map","sub","applicationInfo","applicationId","key","className","ml","find","status","useStyles","makeStyles","buttonIcon","marginRight","centerItems","tokenType","inputAdornmentStart","minWidth","spacing","padding","grid","marginTop","marginBottom","paddingRight","userNotificationPaper","titleSub","marginLeft","paddingTop","paddingBottom","usernameField","width","passwordField","GraphQLAuthentication","accessToken","setAccessTocken","authorizationHeader","securitySchemeType","setSecuritySchemeType","prefix","isApiKeyEnabled","isBasicAuthEnabled","isOAuthEnabled","setURLs","environmentObject","setFound","username","setUserName","password","setPassword","api","useContext","ApiContext","user","AuthManager","getUser","showToken","setShowToken","useState","setSubscriptions","setSelectedApplication","setSelectedKeyType","environments","endpointURLs","endpoint","environmentName","selectedEnvironment","setSelectedEnvironment","keys","setKeys","isPrototypedAPI","lifeCycleStatus","toLowerCase","useEffect","apiID","apiClient","Api","getSubscriptions","then","subscriptionsResponse","subs","obj","list","filter","item","length","sApplication","Application","get","application","getKeys","appKeys","catch","error","Paper","Grid","container","Typography","component","Icon","Box","SelectAppPanel","event","target","promiseApp","keyType","accessTokenValue","token","CircularProgress","size","gutterBottom","TextField","urls","elm","URLs","MenuItem","disabled","env","x","type","InputProps","endAdornment","InputAdornment","position","IconButton","edge","aria-label","onClick","startAdornment","FormControl","RadioGroup","row","FormControlLabel","control","Radio","propTypes","PropTypes","shape","string","isRequired","root","buildSchema","require","GraphQLUI","schema","setSchema","query","setQuery","isExplorerOpen","setIsExplorerOpen","graphiqlEl","useRef","getGraphQLSchemaByAPIId","res","graphqlSchemaObj","data","parameters","handleToggleExplorer","newExplorerIsOpen","Progress","m","https","styles","onEdit","explorerIsOpen","onToggleExplorer","height","flexGrow","ref","fetcher","graphQLParams","btoa","fetch","method","headers","Accept","body","JSON","stringify","response","json","onEditQuery","Toolbar","Button","current","handlePrettifyQuery","title","handleToggleHistory","GraphQLConsole","notFound","securityScheme","includes"],"mappings":"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","file":"GraphQLConsole.7c51e4a48d9f61c5e213.bundle.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = (theme) => ({\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n});\n\nconst SelectAppPanel = (props) => {\n    const {\n        subscriptions, handleChanges, selectedApplication, selectedKeyType, classes, selectedTokenType,\n    } = props;\n    return (\n        <>\n            <Box display='flex' justifyContent='center'>\n                <Grid xs={12} md={3}>\n                    <Box>\n                        <TextField\n                            fullWidth\n                            id='outlined-select-currency'\n                            select\n                            label={(\n                                <FormattedMessage\n                                    defaultMessage='Appplications'\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                                />\n                            )}\n                            value={selectedApplication}\n                            name='selectedApplication'\n                            onChange={handleChanges}\n                            SelectProps={subscriptions}\n                            helperText={(\n                                <FormattedMessage\n                                    defaultMessage='Please select an application'\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.select.an.application'\n                                />\n                            )}\n                            margin='normal'\n                            variant='outlined'\n                        >\n                            {subscriptions.map((sub) => (\n                                <MenuItem\n                                    value={sub.applicationInfo.applicationId}\n                                    key={sub.applicationInfo.applicationId}\n                                    className={classes.menuItem}\n                                >\n                                    {sub.applicationInfo.name}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    </Box>\n                </Grid>\n                <Grid xs={12} md={3}>\n                    {(selectedTokenType !== 'JWT') && (\n                        <Box ml={2}>\n                            <TextField\n                                fullWidth\n                                id='outlined-select-currency'\n                                select\n                                label={(\n                                    <FormattedMessage\n                                        defaultMessage='Key Type'\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.key.type'\n                                    />\n                                )}\n                                value={selectedKeyType}\n                                name='selectedKeyType'\n                                onChange={handleChanges}\n                                helperText={(\n                                    <FormattedMessage\n                                        defaultMessage='Please select a key type'\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.select.key.type'\n                                    />\n                                )}\n                                margin='normal'\n                                variant='outlined'\n                            >\n                                {(subscriptions != null\n                            && subscriptions.find((sub) => sub.applicationId === selectedApplication).status\n                            === 'UNBLOCKED')\n                            && (\n                                <MenuItem value='PRODUCTION' className={classes.menuItem}>\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.production'\n                                        defaultMessage='PRODUCTION'\n                                    />\n                                </MenuItem>\n                            )}\n                                <MenuItem value='SANDBOX' className={classes.menuItem}>\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiConsole.SelectAppPanel.sandbox'\n                                        defaultMessage='SANDBOX'\n                                    />\n                                </MenuItem>\n                            </TextField>\n                        </Box>\n                    )}\n                </Grid>\n            </Box>\n\n        </>\n    );\n};\n\nexport default withStyles(styles)(SelectAppPanel);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport AuthManager from 'AppData/AuthManager';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Icon from '@material-ui/core/Icon';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport {\n    Radio, RadioGroup, FormControlLabel, FormControl,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport SelectAppPanel from '../ApiConsole/SelectAppPanel';\nimport Application from '../../../../data/Application';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\n\nconst useStyles = makeStyles((theme) => ({\n    buttonIcon: {\n        marginRight: 10,\n    },\n    centerItems: {\n        margin: 'auto',\n    },\n    tokenType: {\n        margin: 'auto',\n        display: 'flex',\n    },\n    inputAdornmentStart: {\n        minWidth: theme.spacing(18),\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    userNotificationPaper: {\n        padding: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    usernameField: {\n        width: '100%',\n    },\n    passwordField: {\n        width: '100%',\n        marginLeft: theme.spacing(1),\n    },\n}));\n\n\n/**\n *\n * @param {*} props\n */\nexport default function GraphQLAuthentication(props) {\n    const classes = useStyles();\n\n    const {\n        accessToken,\n        setAccessTocken,\n        authorizationHeader,\n        securitySchemeType,\n        setSecuritySchemeType,\n        prefix,\n        isApiKeyEnabled,\n        isBasicAuthEnabled,\n        isOAuthEnabled,\n        setURLs,\n        environmentObject,\n        setFound,\n        username,\n        setUserName,\n        password,\n        setPassword,\n    } = props;\n\n    const { api } = useContext(ApiContext);\n    const user = AuthManager.getUser();\n    const [showToken, setShowToken] = useState(false);\n    const [subscriptions, setSubscriptions] = useState(null);\n    const [selectedApplication, setSelectedApplication] = useState('');\n    const [selectedKeyType, setSelectedKeyType] = useState('PRODUCTION');\n    const environments = api.endpointURLs.map((endpoint) => endpoint.environmentName);\n    const [selectedEnvironment, setSelectedEnvironment] = useState(environments[0]);\n    const [keys, setKeys] = useState();\n    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n\n        if (user != null) {\n            const promiseSubscription = apiClient.getSubscriptions(apiID);\n\n            promiseSubscription\n                .then((subscriptionsResponse) => {\n                    const subs = subscriptionsResponse.obj.list.filter(\n                        (item) => item.status === 'UNBLOCKED' || item.status === 'PROD_ONLY_BLOCKED',\n                    );\n\n                    if (subs && subs.length > 0) {\n                        const sApplication = subs[0].applicationId;\n                        setSelectedApplication(sApplication);\n                        const promiseApp = Application.get(sApplication);\n                        promiseApp\n                            .then((application) => {\n                                return application.getKeys();\n                            })\n                            .then((appKeys) => {\n                                if (appKeys.get('SANDBOX')) {\n                                    setSelectedKeyType('SANDBOX');\n                                } else if (appKeys.get('PRODUCTION')) {\n                                    setSelectedKeyType('PRODUCTION');\n                                }\n                                setKeys(appKeys);\n                            });\n                    }\n                    setSubscriptions(subs);\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.error(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        setFound(true);\n                    }\n                });\n        }\n    }, []);\n\n    /**\n     *\n     * @param {React.SyntheticEvent} event\n     */\n    const handleChanges = (event) => {\n        const { value, name } = event.target;\n        if (name === 'selectedApplication') {\n            const promiseApp = Application.get(value);\n            let keyType;\n\n            setSelectedApplication(value);\n\n            if (subscriptions != null && subscriptions.find((sub) => sub.applicationId\n                === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n                setSelectedKeyType('SANDBOX');\n                keyType = 'SANDBOX';\n            } else {\n                keyType = selectedKeyType;\n            }\n\n            promiseApp\n                .then((application) => {\n                    return application.getKeys();\n                })\n                .then((appKeys) => {\n                    if (appKeys.get(keyType)) {\n                        const { accessToken: accessTokenValue } = appKeys.get(keyType).token;\n                        setAccessTocken(accessTokenValue);\n                    } else {\n                        setAccessTocken('');\n                    }\n                    setKeys(appKeys);\n                });\n        } else {\n            setSelectedKeyType(value);\n\n            if (keys.get(value)) {\n                const { accessToken: accessTokenValue } = keys.get(value).token;\n                setAccessTocken(accessTokenValue);\n            } else {\n                setAccessTocken('');\n            }\n        }\n    };\n\n\n    /**\n     * Set the environment and URLs for selected environment name\n     * @param {*} event\n     */\n    const handleEnvironemtChange = (event) => {\n        const { value } = event.target;\n        setSelectedEnvironment(value);\n        const urls = environmentObject.find((elm) => value === elm.environmentName).URLs;\n        setURLs(urls);\n    };\n\n\n    /**\n     * Handle onClick of shown access token\n     */\n    const handleClickShowToken = () => {\n        setShowToken(!showToken);\n    };\n\n\n    /**\n     * Load the access token for selected key type\n     * @param {*} event\n     */\n    const handleaccessTockenChanges = (event) => {\n        const { value } = event.target;\n        setAccessTocken(value);\n    };\n\n    /**\n     * Set the security scheme type for selected security scheme type\n     * @param {*} event\n     */\n    const handlesecuritySchemeType = (event) => {\n        const { value } = event.target;\n        setSecuritySchemeType(value);\n    };\n\n    const handleUserName = (event) => {\n        const { value } = event.target;\n        setUserName(value);\n    };\n\n    const handlePassword = (event) => {\n        const { value } = event.target;\n        setPassword(value);\n    };\n\n\n    return (\n        <>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    {!isPrototypedAPI && !user && (\n                        <Grid item md={6}>\n                            <Paper className={classes.userNotificationPaper}>\n                                <Typography variant='h5' component='h3'>\n                                    <Icon>warning</Icon>\n                                    {' '}\n                                    <FormattedMessage id='notice' defaultMessage='Notice' />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.GraphQLConsole.'\n                                            + 'GraphQLAuthentication.require.access.token'}\n                                        defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                    />\n                                </Typography>\n                            </Paper>\n                        </Grid>\n                    )}\n                    {!isPrototypedAPI\n                        && (\n                            <Grid xs={12} md={12} item>\n                                <Box display='block'>\n                                    {user && subscriptions && subscriptions.length > 0 && (\n                                        <SelectAppPanel\n                                            subscriptions={subscriptions}\n                                            handleChanges={handleChanges}\n                                            selectedApplication={selectedApplication}\n                                            selectedKeyType={selectedKeyType}\n                                        />\n                                    )}\n                                    {user && subscriptions === null && (\n                                        <Box display='flex' justifyContent='center'>\n                                            <CircularProgress size={35} />\n                                        </Box>\n                                    )}\n                                    {subscriptions && subscriptions.length === 0 && (\n                                        <Box display='flex' justifyContent='center'>\n                                            <Typography variant='body1' gutterBottom>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.GraphQLConsole.'\n                                                        + 'GraphQLAuthentication.please.subscribe.to.application'}\n                                                    defaultMessage='Please subscribe to an application'\n                                                />\n                                            </Typography>\n                                        </Box>\n                                    )}\n\n                                    <Box display='flex' justifyContent='center'>\n                                        <Grid xs={12} md={6} item>\n                                            {(environments && environments.length > 0)\n                                                && (\n                                                    <TextField\n                                                        fullWidth\n                                                        select\n                                                        label={(\n                                                            <FormattedMessage\n                                                                defaultMessage='Environment'\n                                                                id={'Apis.Details.GraphQLConsole.'\n                                                                    + 'GraphQLAuthentication.env'}\n                                                            />\n                                                        )}\n                                                        value={selectedEnvironment}\n                                                        name='selectedEnvironment'\n                                                        onChange={handleEnvironemtChange}\n                                                        helperText={(\n                                                            <FormattedMessage\n                                                                defaultMessage='Please select an environment'\n                                                                id={'Apis.Details.GraphQLConsole.'\n                                                                    + 'SelectAppPanel.select.env'}\n                                                            />\n                                                        )}\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                    >\n                                                        {environments && environments.length > 0 && (\n                                                            <MenuItem value='' disabled>\n                                                                <em>\n                                                                    <FormattedMessage\n                                                                        id='api.gateways'\n                                                                        defaultMessage='API Gateways'\n                                                                    />\n                                                                </em>\n                                                            </MenuItem>\n                                                        )}\n                                                        {environments && (\n                                                            environments.map((env) => (\n                                                                <MenuItem value={env} key={env}>\n                                                                    {env}\n                                                                </MenuItem>\n                                                            )))}\n                                                    </TextField>\n                                                )}\n                                        </Grid>\n                                    </Box>\n\n                                    <Box display='block' justifyContent='center'>\n                                        <Grid x={12} md={6} className={classes.tokenType} item>\n                                            {securitySchemeType === 'BASIC' ? (\n                                                <>\n                                                    <TextField\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                        className={classes.usernameField}\n                                                        label={\n                                                            <FormattedMessage id='username' defaultMessage='Username' />\n                                                        }\n                                                        name='username'\n                                                        onChange={handleUserName}\n                                                        value={username || ''}\n\n                                                    />\n                                                    <TextField\n                                                        margin='normal'\n                                                        variant='outlined'\n                                                        className={classes.passwordField}\n                                                        label={\n                                                            <FormattedMessage id='password' defaultMessage='Password' />\n                                                        }\n                                                        name='password'\n                                                        onChange={handlePassword}\n                                                        value={password || ''}\n\n                                                    />\n                                                </>\n                                            ) : (\n                                                <TextField\n                                                    fullWidth\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                    label={(\n                                                        <FormattedMessage\n                                                            id='access.token'\n                                                            defaultMessage='Access Token'\n                                                        />\n                                                    )}\n                                                    name='accessToken'\n                                                    onChange={handleaccessTockenChanges}\n                                                    type={showToken ? 'text' : 'password'}\n                                                    value={accessToken || ''}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            id='enter.access.token'\n                                                            defaultMessage='Enter access Token'\n                                                        />\n                                                    )}\n                                                    InputProps={{\n                                                        endAdornment: (\n                                                            <InputAdornment position='end'>\n                                                                <IconButton\n                                                                    edge='end'\n                                                                    aria-label='Toggle token visibility'\n                                                                    onClick={handleClickShowToken}\n                                                                >\n                                                                    {showToken ? <Icon>visibility_off</Icon>\n                                                                        : <Icon>visibility</Icon>}\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        ),\n                                                        startAdornment: (\n                                                            <InputAdornment\n                                                                className={classes.inputAdornmentStart}\n                                                                position='start'\n                                                            >\n                                                                {`${authorizationHeader}: ${prefix}`}\n                                                            </InputAdornment>\n                                                        ),\n                                                        // eslint-disable-next-line indent\n                                                        }}\n                                                />\n                                            )}\n                                        </Grid>\n                                        <Grid x={12} md={6} className={classes.centerItems}>\n                                            {(isApiKeyEnabled || isBasicAuthEnabled || isOAuthEnabled) && (\n                                                <FormControl component='fieldset'>\n                                                    <RadioGroup\n                                                        name='securityScheme'\n                                                        value={securitySchemeType}\n                                                        onChange={handlesecuritySchemeType}\n                                                        row\n                                                    >\n                                                        {isOAuthEnabled && (\n                                                            <FormControlLabel\n                                                                value='OAUTH'\n                                                                control={<Radio />}\n                                                                label='Referenced (OAuth)'\n                                                            />\n                                                        )}\n                                                        {isBasicAuthEnabled && (\n                                                            <FormControlLabel\n                                                                value='BASIC'\n                                                                control={<Radio />}\n                                                                label='Basic'\n                                                            />\n                                                        )}\n                                                        {isApiKeyEnabled && (\n                                                            <FormControlLabel\n                                                                value='API-KEY'\n                                                                control={<Radio />}\n                                                                label='API Key'\n                                                            />\n                                                        )}\n                                                    </RadioGroup>\n                                                </FormControl>\n                                            )}\n                                        </Grid>\n                                    </Box>\n\n                                </Box>\n                            </Grid>\n                        )}\n                </Grid>\n            </Paper>\n        </>\n    );\n}\n\n\nGraphQLAuthentication.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        root: PropTypes.string.isRequired,\n        inputAdornmentStart: PropTypes.string.isRequired,\n        centerItems: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useState, useEffect, useRef, useContext,\n} from 'react';\nimport GraphiQL from 'graphiql';\nimport fetch from 'isomorphic-fetch';\nimport 'graphiql/graphiql.css';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\n\nimport Progress from '../../../Shared/Progress';\n\nconst { buildSchema } = require('graphql');\n\n/**\n *\n * @param {*} props\n */\nexport default function GraphQLUI(props) {\n    const {\n        accessToken,\n        authorizationHeader,\n        URLs,\n        securitySchemeType,\n        username,\n        password,\n    } = props;\n    const { api } = useContext(ApiContext);\n    const [schema, setSchema] = useState(null);\n    const [query, setQuery] = useState('');\n    const [isExplorerOpen, setIsExplorerOpen] = useState(false);\n    const graphiqlEl = useRef(null);\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n\n        promiseGraphQL\n            .then((res) => {\n                const graphqlSchemaObj = buildSchema(res.data);\n                setSchema(graphqlSchemaObj);\n            });\n    }, []);\n\n    const parameters = {};\n\n    const handleToggleExplorer = () => {\n        const newExplorerIsOpen = !isExplorerOpen;\n        parameters.isExplorerOpen = newExplorerIsOpen;\n        setIsExplorerOpen(newExplorerIsOpen);\n    };\n\n    /**\n     *\n     * @param {*} graphQLParams\n     */\n    function graphQLFetcher(graphQLParams) {\n        let token;\n        if (authorizationHeader === 'apikey') {\n            token = accessToken;\n        } else if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            token = 'Basic ' + btoa(credentials);\n        } else {\n            token = 'Bearer ' + accessToken;\n        }\n        return fetch((URLs.https), {\n            method: 'post',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                [authorizationHeader]: token,\n            },\n            body: JSON.stringify(graphQLParams),\n        }).then((response) => response.json());\n    }\n    if ({ schema } === null) {\n        return <Progress />;\n    } else {\n        return (\n            <>\n                <Box width='30%' m={1}>\n                    <TextField\n\n                        label={(\n                            <FormattedMessage\n                                defaultMessage='Gateway URLs'\n                                id='Apis.Details.GraphQLConsole.GraphQLUI.URLs'\n                            />\n                        )}\n                        value={URLs.https}\n                        name='selectedURL'\n                        fullWidth\n                        margin='normal'\n                        variant='outlined'\n                        InputProps={URLs.https}\n                    />\n                </Box>\n                <div styles={{ width: '100%' }}>\n                    <Box display='flex'>\n                        <Box display='flex'>\n                            <GraphiQLExplorer\n                                schema={schema}\n                                query={query}\n                                onEdit={setQuery}\n                                explorerIsOpen={isExplorerOpen}\n                                onToggleExplorer={handleToggleExplorer}\n                            />\n                        </Box>\n                        <Box display='flex' height='800px' flexGrow={1}>\n                            <GraphiQL\n                                ref={graphiqlEl}\n                                fetcher={(graphQLFetcher)}\n                                schema={schema}\n                                query={query}\n                                onEditQuery={setQuery}\n                            >\n                                <GraphiQL.Toolbar>\n                                    <GraphiQL.Button\n                                        onClick={() => graphiqlEl.current.handlePrettifyQuery()}\n                                        label='Prettify'\n                                        title='Prettify Query (Shift-Ctrl-P)'\n                                    />\n                                    <GraphiQL.Button\n                                        onClick={() => graphiqlEl.current.handleToggleHistory()}\n                                        label='History'\n                                        title='Show History'\n                                    />\n                                    <GraphiQL.Button\n                                        onClick={() => setIsExplorerOpen(!isExplorerOpen)}\n                                        label='Explorer'\n                                        title='Toggle Explorer'\n                                    />\n                                </GraphiQL.Toolbar>\n\n                            </GraphiQL>\n                        </Box>\n                    </Box>\n                </div>\n            </>\n        );\n    }\n}\n\nGraphQLUI.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GraphQLAuthentication from './GraphQLAuthentication';\nimport GraphQLUI from './GraphQLUI';\nimport { ApiContext } from '../ApiContext';\nimport Progress from '../../../Shared/Progress';\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n}));\n\n\nexport default function GraphQLConsole() {\n    const classes = useStyles();\n    const { api } = useContext(ApiContext);\n    const environmentObject = api.endpointURLs;\n    const [URLs, setURLs] = useState(environmentObject[0].URLs);\n    const [accessToken, setAccessTocken] = useState('');\n    const [securitySchemeType, setSecuritySchemeType] = useState('OAUTH');\n    const [notFound, setFound] = useState(false);\n    const [username, setUserName] = useState('');\n    const [password, setPassword] = useState('');\n\n    if (api == null) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return 'API Not found !';\n    }\n    let isApiKeyEnabled = false;\n    let isBasicAuthEnabled = false;\n    let isOAuthEnabled = false;\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n    let prefix = 'Bearer';\n\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        isBasicAuthEnabled = api.securityScheme.includes('basic_auth');\n        isOAuthEnabled = api.securityScheme.includes('oauth2');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n            prefix = '';\n        }\n    }\n\n    return (\n        <>\n            <Typography variant='h4' className={classes.titleSub}>\n                <FormattedMessage id='Apis.Details.GraphQLConsole.GraphQLConsole.title' defaultMessage='Try Out' />\n            </Typography>\n\n            <GraphQLAuthentication\n                api={api}\n                securitySchemeType={securitySchemeType}\n                setSecuritySchemeType={setSecuritySchemeType}\n                username={username}\n                setUserName={setUserName}\n                password={password}\n                setPassword={setPassword}\n                prefix={prefix}\n                isApiKeyEnabled={isApiKeyEnabled}\n                isOAuthEnabled={isOAuthEnabled}\n                isBasicAuthEnabled={isBasicAuthEnabled}\n                accessToken={accessToken}\n                setAccessTocken={setAccessTocken}\n                authorizationHeader={authorizationHeader}\n                setURLs={setURLs}\n                environmentObject={environmentObject}\n                setFound={setFound}\n            />\n\n            <Paper className={classes.paper}>\n                <GraphQLUI\n                    accessToken={accessToken}\n                    authorizationHeader={authorizationHeader}\n                    URLs={URLs}\n                    username={username}\n                    password={password}\n                    securitySchemeType={securitySchemeType}\n                />\n            </Paper>\n        </>\n    );\n}\n\nGraphQLConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        root: PropTypes.string.isRequired,\n    }).isRequired,\n};\n"],"sourceRoot":""}