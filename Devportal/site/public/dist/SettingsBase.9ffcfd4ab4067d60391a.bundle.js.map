{"version":3,"sources":["webpack:///./source/src/app/components/Shared/InlineMessage.jsx","webpack:///./node_modules/@material-ui/core/esm/Collapse/Collapse.js","webpack:///./node_modules/@material-ui/core/esm/Fab/Fab.js","webpack:///./node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","webpack:///./node_modules/base64url/index.js","webpack:///./node_modules/base64url/dist/base64url.js","webpack:///./node_modules/base64url/dist/pad-string.js","webpack:///./source/src/app/components/Settings/Alerts/AlertConfiguration.jsx","webpack:///./source/src/app/components/Settings/Alerts/Alerts.jsx","webpack:///./source/src/app/components/Settings/Settings.jsx","webpack:///./source/src/app/components/Settings/SettingsBase.jsx"],"names":["InlineMessage","React","Component","value","this","setState","state","expanded","render","classes","type","props","messgeType","className","root","elevation","iconItem","height","content","children","propTypes","PropTypes","shape","isRequired","string","withStyles","theme","display","minHeight","alignItems","paddingLeft","spacing","borderRadius","border","fontSize","color","custom","info","palette","getContrastText","background","paper","paddingRight","button","marginTop","marginBottom","paddingTop","paddingBottom","Collapse","forwardRef","ref","_props$collapsedHeigh","collapsedHeight","collapsedHeightProp","_props$component","component","inProp","in","onEnter","onEntered","onEntering","onExit","onExiting","style","_props$timeout","timeout","standard","other","timer","useRef","wrapperRef","autoTransitionDuration","concat","useEffect","clearTimeout","current","createElement","node","isAppearing","wrapperHeight","clientHeight","transitionDuration","mode","duration","duration2","transitions","getAutoHeightDuration","addEndListener","_","next","setTimeout","childProps","container","entered","exited","hidden","wrapper","wrapperInner","muiSupportAuto","overflow","transition","create","visibility","width","name","Fab","_props$color","_props$disabled","disabled","_props$disableFocusRi","disableFocusRipple","focusVisibleClassName","_props$size","size","_props$variant","variant","extended","primary","secondary","inherit","colorInherit","focusRipple","focusVisible","label","typography","boxSizing","short","padding","minWidth","boxShadow","shadows","grey","backgroundColor","A100","action","disabledBackground","textDecoration","justifyContent","contrastText","main","dark","sizeSmall","sizeMedium","ListItemSecondaryAction","muiName","position","right","top","transform","module","exports","default","Object","defineProperty","pad_string_1","encode","input","encoding","Buffer","isBuffer","fromBase64","toString","from","toBase64","base64url","replace","base64","decode","toBuffer","stringLength","length","diff","padLength","paddedStringLength","buffer","alloc","write","alertPropertyMap","AbnormalRequestsPerMin","AlertConfiguration","alertType","api","alertName","intl","setIsWorkerNodeDown","alertConfiguration","setAlertConfiguration","useState","apis","setApis","selectedAPIName","setSelectedAPIName","apiNames","setAPINames","Set","apiVersions","setAPIVersions","applications","setApplications","selectedAPIVersion","setSelectedAPIVersion","setValue","isProcessing","setProcessing","collapseOpen","setCollapseOpen","selectedApplicationName","setSelectedApplicationName","alertConfigPromise","getAlertConfigurations","apisPromise","getAllAPIs","Promise","all","then","response","apisList","body","list","apiNamesSet","forEach","tmpApi","add","catch","err","console","log","getAlertConfig","finally","Fragment","Button","onClick","Typography","addBtn","Icon","id","defaultMessage","configWrapper","Grid","item","xs","TextField","select","fullWidth","required","textField","onChange","event","availableVersions","filter","handleAPINameSelect","target","SelectProps","MenuProps","menu","helperText","Array","map","MenuItem","key","version","existingAPI","tmpAPi","getSubscriptions","res","subscribedApps","subscription","applicationInfo","handleApiVersionSelect","selected","applicationId","endAdornment","InputAdornment","configAddBtnContainer","isAddingDissabled","configId","alertConfig","apiName","apiVersion","applicationName","requestCount","putAlertConfiguration","Alert","formatMessage","error","CircularProgress","configNameHeading","values","contentWrapper","newConfig","Table","TableHead","TableRow","TableCell","TableBody","configuration","configurationId","IconButton","delete","deleteAlertConfiguration","handleDeleteConfiguration","injectIntl","borderBottom","Alerts","openDialog","setOpenDialog","open","emails","setEmailsList","supportedAlerts","setSupportedAlerts","subscribedAlerts","setSubscribedAlerts","isAnalyticsEnabled","setAnalyticsEnabled","isInProgress","setInProgress","subscribing","unSubscribing","unsubscribeAll","setUnsubscribeAll","isWorkerNodeDown","API","alertIdMapping","3","displayName","description","4","5","6","isAlertSubscribed","alertId","some","alert","handleCheckAlert","tmpSubscribedAlerts","sub","newAlert","push","requireConfiguration","selectedType","isAlertConfigured","supportedAlertsPromise","getSupportedAlertTypes","subscribedAlertsPromise","getSubscribedAlertTypesByUser","status","alerts","emailList","alertsWrapper","manageAlertHeading","List","ListItem","divider","ListItemIcon","Checkbox","edge","tabIndex","checked","inputProps","ListItemText","listItem","setConfigOpen","chipInput","placeholder","chip","email","handleAddEmail","onDelete","newEmails","oldEmail","handleEmailDeletion","direction","btnContainer","alertsToSubscribe","subscribeAlerts","success","to","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","configDialogHeading","unsubscribeAlerts","func","alertConfigDialog","fontWeight","marginLeft","Settings","settingsRoot","SettingsBase","Container","fixed","headingWrapper"],"mappings":"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","file":"SettingsBase.9ffcfd4ab4067d60391a.bundle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport VerticalDivider from './VerticalDivider';\n/**\n * Main style object\n *\n * @param {*} theme\n */\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        minHeight: 100,\n        alignItems: 'center',\n        paddingLeft: theme.spacing(2),\n        borderRadius: theme.shape.borderRadius,\n        border: 'solid 1px #ddd',\n        '& span.material-icons': {\n            fontSize: 60,\n            color: theme.custom.info.color,\n        },\n        '& span, & h5, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconItem: {\n        paddingRight: theme.spacing(2),\n        fontSize: 60,\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    content: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n});\n/**\n *  Renders a inline massage\n *\n * @class InlineMessage\n * @extends {React.Component}\n */\nclass InlineMessage extends React.Component {\n    state = {\n        value: 0,\n    };\n\n    handleExpandClick = () => {\n        this.setState(state => ({ expanded: !state.expanded }));\n    };\n\n    render() {\n        const { classes, type } = this.props;\n        const messgeType = type || 'info';\n        return (\n            <Paper className={classes.root} elevation={1}>\n                {messgeType === 'info' && <Icon className={classes.iconItem}>info</Icon>}\n                {messgeType === 'warn' && <Icon className={classes.iconItem}>warning</Icon>}\n                <VerticalDivider height={100} />\n                <div className={classes.content}>{this.props.children}</div>\n            </Paper>\n        );\n    }\n}\nInlineMessage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(InlineMessage);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport withStyles from '../styles/withStyles';\nimport { duration } from '../styles/transitions';\nimport { getTransitionProps } from '../transitions/utils';\nimport useTheme from '../styles/useTheme';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the container element. */\n    container: {\n      height: 0,\n      overflow: 'hidden',\n      transition: theme.transitions.create('height')\n    },\n\n    /* Styles applied to the container element when the transition has entered. */\n    entered: {\n      height: 'auto',\n      overflow: 'visible'\n    },\n\n    /* Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px. */\n    hidden: {\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the outer wrapper element. */\n    wrapper: {\n      // Hack to get children with a negative margin to not falsify the height computation.\n      display: 'flex'\n    },\n\n    /* Styles applied to the inner wrapper element. */\n    wrapperInner: {\n      width: '100%'\n    }\n  };\n};\n/**\n * The Collapse transition is used by the\n * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nvar Collapse = React.forwardRef(function Collapse(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$collapsedHeigh = props.collapsedHeight,\n      collapsedHeightProp = _props$collapsedHeigh === void 0 ? '0px' : _props$collapsedHeigh,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      inProp = props.in,\n      onEnter = props.onEnter,\n      onEntered = props.onEntered,\n      onEntering = props.onEntering,\n      onExit = props.onExit,\n      onExiting = props.onExiting,\n      style = props.style,\n      _props$timeout = props.timeout,\n      timeout = _props$timeout === void 0 ? duration.standard : _props$timeout,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"collapsedHeight\", \"component\", \"in\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExiting\", \"style\", \"timeout\"]);\n\n  var theme = useTheme();\n  var timer = React.useRef();\n  var wrapperRef = React.useRef(null);\n  var autoTransitionDuration = React.useRef();\n  var collapsedHeight = typeof collapsedHeightProp === 'number' ? \"\".concat(collapsedHeightProp, \"px\") : collapsedHeightProp;\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(timer.current);\n    };\n  }, []);\n\n  var handleEnter = function handleEnter(node, isAppearing) {\n    node.style.height = collapsedHeight;\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  var handleEntering = function handleEntering(node, isAppearing) {\n    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n\n    var _getTransitionProps = getTransitionProps({\n      style: style,\n      timeout: timeout\n    }, {\n      mode: 'enter'\n    }),\n        transitionDuration = _getTransitionProps.duration;\n\n    if (timeout === 'auto') {\n      var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n      node.style.transitionDuration = \"\".concat(duration2, \"ms\");\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : \"\".concat(transitionDuration, \"ms\");\n    }\n\n    node.style.height = \"\".concat(wrapperHeight, \"px\");\n\n    if (onEntering) {\n      onEntering(node, isAppearing);\n    }\n  };\n\n  var handleEntered = function handleEntered(node, isAppearing) {\n    node.style.height = 'auto';\n\n    if (onEntered) {\n      onEntered(node, isAppearing);\n    }\n  };\n\n  var handleExit = function handleExit(node) {\n    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n    node.style.height = \"\".concat(wrapperHeight, \"px\");\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  var handleExiting = function handleExiting(node) {\n    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n\n    var _getTransitionProps2 = getTransitionProps({\n      style: style,\n      timeout: timeout\n    }, {\n      mode: 'exit'\n    }),\n        transitionDuration = _getTransitionProps2.duration;\n\n    if (timeout === 'auto') {\n      var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n      node.style.transitionDuration = \"\".concat(duration2, \"ms\");\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : \"\".concat(transitionDuration, \"ms\");\n    }\n\n    node.style.height = collapsedHeight;\n\n    if (onExiting) {\n      onExiting(node);\n    }\n  };\n\n  var addEndListener = function addEndListener(_, next) {\n    if (timeout === 'auto') {\n      timer.current = setTimeout(next, autoTransitionDuration.current || 0);\n    }\n  };\n\n  return React.createElement(Transition, _extends({\n    in: inProp,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExiting: handleExiting,\n    addEndListener: addEndListener,\n    timeout: timeout === 'auto' ? null : timeout\n  }, other), function (state, childProps) {\n    return React.createElement(Component, _extends({\n      className: clsx(classes.container, className, {\n        entered: classes.entered,\n        exited: !inProp && collapsedHeight === '0px' && classes.hidden\n      }[state]),\n      style: _extends({\n        minHeight: collapsedHeight\n      }, style),\n      ref: ref\n    }, childProps), React.createElement(\"div\", {\n      className: classes.wrapper,\n      ref: wrapperRef\n    }, React.createElement(\"div\", {\n      className: classes.wrapperInner\n    }, children)));\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Collapse.propTypes = {\n  /**\n   * The content node to be collapsed.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The height of the container when collapsed.\n   */\n  collapsedHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  }), PropTypes.oneOf(['auto'])])\n} : void 0;\nCollapse.muiSupportAuto = true;\nexport default withStyles(styles, {\n  name: 'MuiCollapse'\n})(Collapse);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      minHeight: 36,\n      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n        duration: theme.transitions.duration.short\n      }),\n      borderRadius: '50%',\n      padding: 0,\n      minWidth: 0,\n      width: 56,\n      height: 56,\n      boxShadow: theme.shadows[6],\n      '&:active': {\n        boxShadow: theme.shadows[12]\n      },\n      color: theme.palette.getContrastText(theme.palette.grey[300]),\n      backgroundColor: theme.palette.grey[300],\n      '&$focusVisible': {\n        boxShadow: theme.shadows[6]\n      },\n      '&:hover': {\n        backgroundColor: theme.palette.grey.A100,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.grey[300]\n        },\n        '&$disabled': {\n          backgroundColor: theme.palette.action.disabledBackground\n        },\n        textDecoration: 'none'\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled,\n        boxShadow: theme.shadows[0],\n        backgroundColor: theme.palette.action.disabledBackground\n      }\n    }),\n\n    /* Styles applied to the span element that wraps the children. */\n    label: {\n      width: '100%',\n      // assure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    primary: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.primary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    secondary: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.secondary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.secondary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"extended\"`. */\n    extended: {\n      borderRadius: 48 / 2,\n      padding: '0 16px',\n      width: 'auto',\n      minHeight: 'auto',\n      minWidth: 48,\n      height: 48,\n      '&$sizeSmall': {\n        width: 'auto',\n        padding: '0 8px',\n        borderRadius: 34 / 2,\n        minWidth: 34,\n        height: 34\n      },\n      '&$sizeMedium': {\n        width: 'auto',\n        padding: '0 16px',\n        borderRadius: 40 / 2,\n        minWidth: 40,\n        height: 40\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"``. */\n    sizeSmall: {\n      width: 40,\n      height: 40\n    },\n\n    /* Styles applied to the root element if `size=\"medium\"``. */\n    sizeMedium: {\n      width: 48,\n      height: 48\n    }\n  };\n};\nvar Fab = React.forwardRef(function Fab(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'button' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'large' : _props$size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'round' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableFocusRipple\", \"focusVisibleClassName\", \"size\", \"variant\"]);\n\n  return React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className, variant !== \"round\" && classes.extended, size !== 'large' && classes[\"size\".concat(capitalize(size))], disabled && classes.disabled, {\n      primary: classes.primary,\n      secondary: classes.secondary,\n      inherit: classes.colorInherit\n    }[color]),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ref: ref\n  }, other), React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? Fab.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['round', 'extended'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFab'\n})(Fab);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemSecondaryAction.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","module.exports = require('./dist/base64url').default;\nmodule.exports.default = module.exports;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pad_string_1 = require(\"./pad-string\");\nfunction encode(input, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    if (Buffer.isBuffer(input)) {\n        return fromBase64(input.toString(\"base64\"));\n    }\n    return fromBase64(Buffer.from(input, encoding).toString(\"base64\"));\n}\n;\nfunction decode(base64url, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    return Buffer.from(toBase64(base64url), \"base64\").toString(encoding);\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    return pad_string_1.default(base64url)\n        .replace(/\\-/g, \"+\")\n        .replace(/_/g, \"/\");\n}\nfunction fromBase64(base64) {\n    return base64\n        .replace(/=/g, \"\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\nfunction toBuffer(base64url) {\n    return Buffer.from(toBase64(base64url), \"base64\");\n}\nvar base64url = encode;\nbase64url.encode = encode;\nbase64url.decode = decode;\nbase64url.toBase64 = toBase64;\nbase64url.fromBase64 = fromBase64;\nbase64url.toBuffer = toBuffer;\nexports.default = base64url;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction padString(input) {\n    var segmentLength = 4;\n    var stringLength = input.length;\n    var diff = stringLength % segmentLength;\n    if (!diff) {\n        return input;\n    }\n    var position = stringLength;\n    var padLength = segmentLength - diff;\n    var paddedStringLength = stringLength + padLength;\n    var buffer = Buffer.alloc(paddedStringLength);\n    buffer.write(input);\n    while (padLength--) {\n        buffer.write(\"=\", position++);\n    }\n    return buffer.toString();\n}\nexports.default = padString;\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    CircularProgress,\n    Collapse,\n    Grid,\n    Icon,\n    IconButton,\n    MenuItem,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography,\n    withStyles,\n    InputAdornment,\n    Fab,\n} from '@material-ui/core';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport base64url from 'base64url';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\n\nconst alertPropertyMap = {\n    AbnormalRequestsPerMin: 'requestCount',\n};\n\nconst styles = theme => ({\n    addBtn: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    configAddBtnContainer: {\n        display: 'flex',\n        paddingBottom: theme.spacing(2),\n    },\n    configWrapper: {\n        padding: theme.spacing(2),\n    },\n    configNameHeading: {\n        marginBottom: theme.spacing(),\n        borderBottom: '#cccccc 1px inset',\n    },\n});\n\n/**\n * Alert Configuration component.\n * This component is used to list add and delete the alert configurations.\n *\n * @param {any} props The input props.\n * @return {any} The HTML representation of the component.\n * */\nconst AlertConfiguration = (props) => {\n    const {\n        alertType,\n        api,\n        alertName,\n        classes,\n        intl,\n        setIsWorkerNodeDown,\n    } = props;\n    const [alertConfiguration, setAlertConfiguration] = useState([]);\n    const [apis, setApis] = useState();\n    const [selectedAPIName, setSelectedAPIName] = useState();\n    const [apiNames, setAPINames] = useState(new Set());\n    const [apiVersions, setAPIVersions] = useState([]);\n    const [applications, setApplications] = useState([]);\n    const [selectedAPIVersion, setSelectedAPIVersion] = useState();\n    const [value, setValue] = useState();\n    const [isProcessing, setProcessing] = useState({});\n    const [collapseOpen, setCollapseOpen] = useState(false);\n    const [selectedApplicationName, setSelectedApplicationName] = useState();\n\n    useEffect(() => {\n        const alertConfigPromise = api.getAlertConfigurations(alertType);\n        const apisPromise = api.getAllAPIs();\n        Promise.all([alertConfigPromise, apisPromise])\n            .then((response) => {\n                const apisList = response[1].body.list;\n                const apiNamesSet = new Set();\n                apisList.forEach((tmpApi) => {\n                    apiNamesSet.add(tmpApi.name);\n                });\n                setAPINames(apiNamesSet);\n                setApis(apisList);\n                setAlertConfiguration(response[0].body);\n            })\n            .catch((err) => {\n                console.log(err);\n                setIsWorkerNodeDown(true);\n            });\n    }, []);\n\n    /**\n     * Handles the API Name select event.\n     * Once the api name is selected, the api versions list is populated.\n     * @param {string} name The selected api name.\n     * */\n    const handleAPINameSelect = (name) => {\n        setSelectedAPIName(name);\n        const availableVersions = apis.filter(tmpApi => tmpApi.name === name);\n        setAPIVersions(availableVersions);\n    };\n\n    /**\n     * Handles the api version select event.\n     * In this method, get the subscriptions of the selected api+version and set to the state.\n     * @param {string} version The selected api version.\n     * */\n    const handleApiVersionSelect = (version) => {\n        setSelectedAPIVersion(version);\n        const existingAPI = apis.filter((tmpAPi) => {\n            return tmpAPi.name === selectedAPIName && tmpAPi.version === version;\n        });\n        if (existingAPI.length > 0) {\n            api.getSubscriptions(existingAPI[0].id).then((res) => {\n                const subscribedApps = res.body.list.map((subscription) => {\n                    return subscription.applicationInfo;\n                });\n                setApplications(subscribedApps);\n            }).catch((err) => {\n                console.log(err);\n            });\n        }\n    };\n\n    /**\n     * Get the alert configuration of the alert type.\n     * This method is called after a configuration addition or deletion.\n     *\n     * @param {string} action The action that is being performed.\n     * */\n    const getAlertConfig = (action) => {\n        api.getAlertConfigurations(alertType).then((response) => {\n            setAlertConfiguration(response.body);\n        }).catch().finally(() => {\n            setProcessing({ [action]: false });\n        });\n    };\n\n    /**\n     * Handles the configuration add operation.\n     * */\n    const handleAddConfiguration = () => {\n        setProcessing({ add: true });\n        const configId = base64url.encode(selectedAPIName + '#' + selectedAPIVersion + '#' + selectedApplicationName);\n        const alertConfig = {\n            apiName: selectedAPIName,\n            apiVersion: selectedAPIVersion,\n            applicationName: selectedApplicationName,\n            requestCount: value,\n        };\n        api.putAlertConfiguration(alertType, alertConfig, configId)\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Settings.Alert.AlertConfiguration.alert.config.add.success.msg',\n                    defaultMessage: 'Alert Configuration added successfully',\n                }));\n                setSelectedAPIName('');\n                setSelectedAPIVersion('');\n                setSelectedApplicationName('');\n                setValue('');\n            })\n            .catch(() => {\n                Alert.error(intl.formatMessage({\n                    id: 'Settings.Alert.AlertConfiguration.alert.config.add.error.msg',\n                    defaultMessage: 'Error occurred while adding alert configuration',\n                }));\n            })\n            .finally(() => {\n                getAlertConfig('add');\n            });\n    };\n\n    /**\n     * Handles the configuration delet operation for a selected configuration.\n     *\n     * @param {strng} id The configuration id.\n     * */\n    const handleDeleteConfiguration = (id) => {\n        setProcessing({ delete: id });\n        api.deleteAlertConfiguration(alertType, id).then(() => {\n            Alert.info(intl.formatMessage({\n                id: 'Settings.Alert.AlertConfiguration.alert.config.delete.success.msg',\n                defaultMessage: 'Alert Configuration deleted successfully',\n            }));\n        }).catch(() => {\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alert.AlertConfiguration.alert.config.delete.error.msg',\n                defaultMessage: 'Error occurred while deleting the configuration.',\n            }));\n        }).finally(() => {\n            getAlertConfig('delete');\n        });\n    };\n\n    const isAddingDissabled = () => {\n        return !selectedAPIName || !selectedAPIVersion || !selectedApplicationName || !value || isProcessing.add;\n    };\n\n    if (!apis || !alertConfiguration) {\n        return <CircularProgress />;\n    }\n    return (\n        <React.Fragment>\n            <React.Fragment>\n                <Button onClick={() => setCollapseOpen(!collapseOpen)} color='primary'>\n                    <Typography className={classes.addBtn}>\n                        <Icon color='primary'>\n                            add\n                        </Icon>\n                        <FormattedMessage\n                            id='Settings.Alert.AlertConfiguration.add'\n                            defaultMessage='New Configuration'\n                        />\n                    </Typography>\n                </Button>\n                <Collapse in={collapseOpen} className={classes.configWrapper}>\n                    <Grid container spacing={1}>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-select-api-name'\n                                select\n                                fullWidth\n                                required\n                                label={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.api.name.label'\n                                    defaultMessage='API Name'\n                                />}\n                                className={classes.textField}\n                                value={selectedAPIName}\n                                onChange={event => handleAPINameSelect(event.target.value)}\n                                SelectProps={{\n                                    MenuProps: {\n                                        className: classes.menu,\n                                    },\n                                }}\n                                helperText={\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.select.api.helper'\n                                        defaultMessage='Select the API Name'\n                                    />\n                                }\n                                variant='outlined'\n                            >\n                                {apiNames && Array.from(apiNames).map((name) => {\n                                    return (\n                                        <MenuItem key={name} value={name}>\n                                            {name}\n                                        </MenuItem>);\n                                })}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-select-api-version'\n                                select\n                                fullWidth\n                                required\n                                label={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.api.version.label'\n                                    defaultMessage='API Version'\n                                />}\n                                className={classes.textField}\n                                value={selectedAPIVersion}\n                                onChange={event => handleApiVersionSelect(event.target.value)}\n                                SelectProps={{\n                                    MenuProps: {\n                                        className: classes.menu,\n                                    },\n                                }}\n                                helperText={\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.select.version.helper'\n                                        defaultMessage='Select API Version'\n                                    />\n                                }\n                                variant='outlined'\n                            >\n                                {apiVersions && apiVersions.map((selected) => {\n                                    return (\n                                        <MenuItem key={selected.version} value={selected.version}>\n                                            {selected.version}\n                                        </MenuItem>\n                                    );\n                                })}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-select-applications'\n                                select\n                                fullWidth\n                                required\n                                label={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.applications.label'\n                                    defaultMessage='Application'\n                                />}\n                                className={classes.textField}\n                                value={selectedApplicationName}\n                                onChange={event => setSelectedApplicationName(event.target.value)}\n                                SelectProps={{\n                                    MenuProps: {\n                                        className: classes.menu,\n                                    },\n                                }}\n                                helperText={\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.select.application.helper'\n                                        defaultMessage='Select Application'\n                                    />\n                                }\n                                variant='outlined'\n                            >\n                                {applications && applications.map((applicationInfo) => {\n                                    return (\n                                        <MenuItem key={applicationInfo.applicationId} value={applicationInfo.name}>\n                                            {applicationInfo.name}\n                                        </MenuItem>\n                                    );\n                                })}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-value'\n                                type='number'\n                                fullWidth\n                                required\n                                label={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.request.count.label'\n                                    defaultMessage='Request Count.'\n                                />}\n                                className={classes.textField}\n                                value={value}\n                                onChange={event => setValue(event.target.value)}\n                                variant='outlined'\n                                endAdornment={<InputAdornment position='end'>ms</InputAdornment>}\n                                helperText={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.threshold.value.helper'\n                                    defaultMessage='Enter Request Count.'\n                                />}\n                            />\n                        </Grid>\n                        <Grid item className={classes.configAddBtnContainer}>\n                            <Fab\n                                disabled={isAddingDissabled()}\n                                color='primary'\n                                size='medium'\n                                onClick={handleAddConfiguration}\n                            >\n                                <Icon>\n                                    {isProcessing.add && <CircularProgress size={15} />}\n                                    add\n                                </Icon>\n                            </Fab>\n                        </Grid>\n                    </Grid>\n                </Collapse>\n            </React.Fragment>\n            <React.Fragment>\n                <Typography className={classes.configNameHeading}>\n                    <FormattedMessage\n                        id='Settings.Alerts.AlertConfiguration.configuration'\n                        defaultMessage='{name} Configurations'\n                        values={{ name: alertName }}\n                    />\n                </Typography>\n                {alertConfiguration.length === 0 ? (\n                    <InlineMessage height={80}>\n                        <div className={classes.contentWrapper}>\n                            <Typography>\n                                <FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.no.config.message'\n                                    defaultMessage={'You do not have any configurations. Click on {newConfig} button' +\n                                    ' to add a configuration.'}\n                                    values={{\n                                        newConfig: <b>New Configuration</b>,\n                                    }}\n                                />\n                            </Typography>\n                        </div>\n                    </InlineMessage>) :\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.api.name'\n                                        defaultMessage='API Name'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.api.version'\n                                        defaultMessage='API Version'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.app.name'\n                                        defaultMessage='Application Name'\n                                    />\n                                </TableCell>\n                                <TableCell>{alertName}</TableCell>\n                                <TableCell />\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {alertConfiguration.map((configuration) => {\n                                return (\n                                    <TableRow id={configuration.configurationId} key={configuration.configurationId}>\n                                        <TableCell>{configuration.configuration.apiName}</TableCell>\n                                        <TableCell>{configuration.configuration.apiVersion}</TableCell>\n                                        <TableCell>{configuration.configuration.applicationName}</TableCell>\n                                        <TableCell>\n                                            {configuration.configuration[alertPropertyMap[alertType]]}\n                                        </TableCell>\n                                        <TableCell>\n                                            <IconButton\n                                                onClick={() => handleDeleteConfiguration(configuration.configurationId)}\n                                            >\n                                                {isProcessing.delete === configuration.configurationId ?\n                                                    <CircularProgress size={15} /> :\n                                                    <Icon>\n                                                        delete\n                                                    </Icon>\n                                                }\n                                            </IconButton>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                }\n            </React.Fragment>\n        </React.Fragment>\n    );\n};\n\nAlertConfiguration.propTypes = {\n    alertType: PropTypes.string.isRequired,\n    alertName: PropTypes.string.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AlertConfiguration));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport {\n    Paper,\n    ListItem,\n    Checkbox,\n    ListItemText,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    IconButton,\n    Icon,\n    withStyles,\n    Typography,\n    List,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Button,\n    DialogActions,\n    CircularProgress,\n    DialogContentText,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport ChipInput from 'material-ui-chip-input';\nimport Grid from '@material-ui/core/Grid';\nimport { Link } from 'react-router-dom';\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport AlertConfiguration from './AlertConfiguration';\n\n\nconst styles = theme => ({\n    alertsWrapper: {\n        padding: theme.spacing(2),\n        '& span, & h5, & label, & input, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    manageAlertHeading: {\n        marginBottom: theme.spacing(),\n    },\n    chipInput: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    alertConfigDialog: {\n        width: '60%',\n    },\n    configDialogHeading: {\n        fontWeight: '600',\n    },\n    btnContainer: {\n        marginTop: theme.spacing(),\n    },\n    listItem: {\n        marginLeft: theme.spacing(1),\n    },\n});\n\n/**\n * Alerts management component.\n *\n * @param {any} props The Input props.\n * @return {any} HTML representation of the component.\n * */\nconst Alerts = (props) => {\n    const {\n        classes,\n        intl,\n    } = props;\n    const [openDialog, setOpenDialog] = useState({ open: false, alertType: '', name: '' });\n    const [emails, setEmailsList] = useState([]);\n    const [supportedAlerts, setSupportedAlerts] = useState();\n    const [subscribedAlerts, setSubscribedAlerts] = useState([]);\n    const [isAnalyticsEnabled, setAnalyticsEnabled] = useState(false);\n    const [isInProgress, setInProgress] = useState({ subscribing: false, unSubscribing: false });\n    const [unsubscribeAll, setUnsubscribeAll] = useState(false);\n    const [isWorkerNodeDown, setIsWorkerNodeDown] = useState(false);\n    const api = new API();\n\n    const alertIdMapping =\n        {\n            3: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.response.time',\n                    defaultMessage: 'Abnormal Requests per Minute',\n                }),\n                displayName: 'AbnormalRequestsPerMin',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.request.per.min.description',\n                    defaultMessage: 'This alert is triggered if there is a sudden spike the request count within a ' +\n                            'period of one minute by default for a particular API for an application. These alerts ' +\n                            'could be treated as an indication of a possible high traffic, suspicious activity, ' +\n                            'possible malfunction of the client application, etc.',\n                }),\n            },\n            4: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.backend.time',\n                    defaultMessage: 'Abnormal Resource Access',\n                }),\n                displayName: 'AbnormalRequestPattern',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.request.pattern.description',\n                    defaultMessage: 'This alert is triggered if there is a change in the resource access pattern of ' +\n                        'a user of a particular application. These alerts could be treated as an indication of a ' +\n                        'suspicious activity made by a user over your application.',\n                }),\n            },\n            5: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.numusual.ip',\n                    defaultMessage: 'Unusual IP Access',\n                }),\n                displayName: 'UnusualIPAccess',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.unusual.ip.access.description',\n                    defaultMessage: 'This alert is triggered if there is either a change in the request source IP ' +\n                        'for a particular application by a user or if the request is from an IP used before a ' +\n                        'time period of 30 days (default). These alerts could be treated as an indication of a ' +\n                        'suspicious activity made by a user over an application.',\n                }),\n            },\n            6: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.frequent.tier',\n                    defaultMessage: 'Frequent Tier Limit Hitting',\n                }),\n                displayName: 'FrequentTierLimitHitting',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.tier.limit.hitting.description',\n                    defaultMessage: 'This alert is triggered if at least one of the two cases below are satisfied.' +\n                        ' if a particular application gets throttled out for hitting the subscribed tier limit of ' +\n                        'that application more than 10 times (by default) within an hour (by default) or if a ' +\n                        'particular user of an application gets throttled out for hitting the subscribed tier limit ' +\n                        'of a particular API more than 10 times (by default) within a day (by default)',\n                }),\n            },\n        };\n    /**\n     * Set the configuration dialog open property for provided alert type.\n     *\n     * @param {number} id The alert type id\n     * */\n    const setConfigOpen = (id) => {\n        setOpenDialog({\n            open: true,\n            alertType: alertIdMapping[id].displayName,\n            name: alertIdMapping[id].name,\n        });\n    };\n\n    /**\n     * Checks whether the provided alert is aubscribed.\n     *\n     * @param {number} alertId : The id of the alert.\n     * @return {boolean} True if the alert is subscribed. False otherwise.\n     * */\n    const isAlertSubscribed = (alertId) => {\n        return subscribedAlerts.some((alert) => { return alert.id === alertId; });\n    };\n\n    /**\n     * Check whether the provided alert is configured.\n     *\n     * @param {string} selectedType : The alert type which needs to be check.\n     * */\n    const isAlertConfigured = (selectedType) => {\n        api.getAlertConfigurations(selectedType.displayName).then((res) => {\n            const data = res.body;\n            if (data.length === 0) {\n                setOpenDialog({ open: true, alertType: selectedType.displayName, name: selectedType.name });\n            }\n        }).catch(err => console.log(err));\n    };\n\n    /**\n     * Handles the alert type select event.\n     *\n     * @param {obj} alert : The selected alert.\n     * */\n    const handleCheckAlert = (alert) => {\n        const alertId = alert.id;\n        let tmpSubscribedAlerts = [...subscribedAlerts];\n        if (isAlertSubscribed(alertId)) {\n            tmpSubscribedAlerts = tmpSubscribedAlerts.filter((sub) => {\n                return sub.id !== alertId;\n            });\n        } else {\n            const newAlert = { id: alertId, name: alertIdMapping[alertId].displayName, configuration: [] };\n            tmpSubscribedAlerts.push(newAlert);\n        }\n        // Check whether the alert is configurable and check configuration exists.\n        if (alert.requireConfiguration) {\n            isAlertConfigured(alertIdMapping[alertId]);\n        }\n        setSubscribedAlerts(tmpSubscribedAlerts);\n    };\n\n    /**\n     * Handles the add email event.\n     *\n     * @param {string} email The email address that is being added.\n     * */\n    const handleAddEmail = (email) => {\n        setEmailsList(email);\n    };\n\n    /**\n     * Handles the email deletion event.\n     *\n     * @param {string} email : The email that is being deleted.\n     * */\n    const handleEmailDeletion = (email) => {\n        const newEmails = emails.filter((oldEmail) => {\n            return oldEmail !== email;\n        });\n        setEmailsList(newEmails);\n    };\n\n    useEffect(() => {\n        const supportedAlertsPromise = api.getSupportedAlertTypes();\n        const subscribedAlertsPromise = api.getSubscribedAlertTypesByUser();\n        Promise.all([supportedAlertsPromise, subscribedAlertsPromise]).then((response) => {\n            if (response[0].status === 204 || response[1].status === 204) {\n                setAnalyticsEnabled(false);\n            } else {\n                setAnalyticsEnabled(true);\n                setSubscribedAlerts(response[1].body.alerts);\n                setEmailsList(response[1].body.emailList);\n                setSupportedAlerts(response[0].body.alerts);\n            }\n        }).catch((err) => {\n            setAnalyticsEnabled(false);\n            setSubscribedAlerts({});\n            console.error(err);\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.loading.error.msg',\n                defaultMessage: 'Error occurred while loading alerts',\n            }));\n        });\n    }, []);\n\n    /**\n     * Handles the subscribe button click action.\n     * */\n    const handleSubscribe = () => {\n        setInProgress({ subscribing: true });\n        const alertsToSubscribe = { alerts: subscribedAlerts, emailList: emails };\n        api.subscribeAlerts(alertsToSubscribe).then(() => {\n            Alert.success(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.subscribe.success.msg',\n                defaultMessage: 'Subscribed to Alerts Successfully.',\n            }));\n        }).catch((err) => {\n            console.error(err);\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.subscribe.error.msg',\n                defaultMessage: 'Error occurred while subscribing to alerts.',\n            }));\n        }).finally(() => setInProgress({ subscribing: false }));\n    };\n\n    /**\n     * Handles unsubscribe button click action.\n     * */\n    const handleUnSubscribe = () => {\n        setInProgress({ unSubscribing: true });\n        api.unsubscribeAlerts().then(() => {\n            setSubscribedAlerts([]);\n            setEmailsList([]);\n            Alert.success(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.unsubscribe.success.msg',\n                defaultMessage: 'Unsubscribed from all alerts successfully.',\n            }));\n        }).catch((err) => {\n            console.error(err);\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.unsubscribe.error.msg',\n                defaultMessage: 'Error occurred while unsubscribing.',\n            }));\n        }).finally(() => setInProgress({ unSubscribing: false }));\n    };\n    // if (!supportedAlerts) {\n    //     return <CircularProgress />;\n    // }\n    return (\n        <React.Fragment>\n            <div className={classes.alertsWrapper}>\n                {!isAnalyticsEnabled ?\n                    <React.Fragment>\n                        <InlineMessage type='info' height={100}>\n                            <div>\n                                <Typography>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.Alerts.enable.analytics.message'\n                                        defaultMessage='Enable Analytics to Configure Alerts'\n                                    />\n                                </Typography>\n                            </div>\n                        </InlineMessage>\n                    </React.Fragment> :\n                    <React.Fragment>\n                        {!supportedAlerts ?\n                            <CircularProgress /> :\n                            <React.Fragment>\n                                <Typography variant='h6' className={classes.manageAlertHeading}>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.Alerts.subscribe.to.alerts.heading'\n                                        defaultMessage='Manage Alert Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.Alerts.subscribe.to.alerts.subheading'\n                                        defaultMessage={'Select the Alert types to subscribe/ unsubscribe and click' +\n                                        ' Save.'}\n                                    />\n                                </Typography>\n                                <List>\n                                    {supportedAlerts && supportedAlerts.map((alert) => {\n                                        return (\n                                            <ListItem key={alert.id} divider>\n                                                <ListItemIcon>\n                                                    <Checkbox\n                                                        edge='start'\n                                                        tabIndex={-1}\n                                                        value={alert.id}\n                                                        checked={isAlertSubscribed(alert.id)}\n                                                        onChange={() => handleCheckAlert(alert)}\n                                                        inputProps={{ 'aria-labelledby': alert.name }}\n                                                        color='primary'\n                                                    />\n                                                </ListItemIcon>\n                                                <ListItemText\n                                                    id={alert.id}\n                                                    primary={alertIdMapping[alert.id].name}\n                                                    secondary={alertIdMapping[alert.id].description}\n                                                    className={classes.listItem}\n                                                />\n                                                {alert.requireConfiguration === true ?\n                                                    <ListItemSecondaryAction>\n                                                        <IconButton\n                                                            onClick={() => setConfigOpen(alert.id)}\n                                                        >\n                                                            <Icon>\n                                                                settings\n                                                            </Icon>\n                                                        </IconButton>\n                                                    </ListItemSecondaryAction> :\n                                                    <div />}\n                                            </ListItem>\n                                        );\n                                    })}\n                                </List>\n                                <ChipInput\n                                    label='Emails'\n                                    variant='outlined'\n                                    className={classes.chipInput}\n                                    value={emails}\n                                    placeholder='Enter email address and press Enter'\n                                    required\n                                    helperText={'Email address to receive alerts of selected Alert types. Type email' +\n                                    ' address and press Enter to add'}\n                                    onChange={(chip) => {\n                                        handleAddEmail(chip);\n                                    }}\n                                    onDelete={(chip) => {\n                                        handleEmailDeletion(chip);\n                                    }}\n                                />\n                                <Grid container direction='row' spacing={2} className={classes.btnContainer}>\n                                    <Grid item>\n                                        <Button\n                                            disabled={emails.length === 0 || subscribedAlerts.length === 0}\n                                            onClick={handleSubscribe}\n                                            variant='contained'\n                                            color='primary'\n                                        >\n                                            {isInProgress.subscribing && <CircularProgress size={15} />}\n                                            Save\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            disabled={isInProgress.subscribing}\n                                            color='primary'\n                                            variant='contained'\n                                            onClick={() => setUnsubscribeAll(true)}\n                                        >\n                                            {isInProgress.unSubscribing && <CircularProgress size={15} />}\n                                            Unsubscribe All\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Link to='/apis/'>\n                                            <Button\n                                                disabled={isInProgress.subscribing}\n                                                variant='contained'\n                                                color='default'\n                                            >\n                                                {isInProgress.unSubscribing && <CircularProgress size={15} />}\n                                                    Cancel\n                                            </Button>\n                                        </Link>\n                                    </Grid>\n                                </Grid>\n                            </React.Fragment>}\n                    </React.Fragment>}\n            </div>\n            <Dialog open={openDialog.open}>\n                <DialogTitle>\n                    <FormattedMessage\n                        id='Settings.Alerts.Alerts.configure.alert'\n                        defaultMessage='Configurations'\n                    />\n                </DialogTitle>\n                {isWorkerNodeDown ? (\n                    <DialogContent>\n                        <DialogContentText id='analytics-dialog-description'>\n                            <FormattedMessage\n                                id='Apis.Settings.Alerts.connection.error'\n                                defaultMessage='Could not connect to analytics server. Please check the connectivity.'\n                            />\n                        </DialogContentText>\n                    </DialogContent>\n                ) : (\n                    <DialogContent>\n                        <AlertConfiguration\n                            alertType={openDialog.alertType}\n                            alertName={openDialog.name}\n                            api={api}\n                            setIsWorkerNodeDown={setIsWorkerNodeDown}\n                        />\n                    </DialogContent>)}\n                <DialogActions>\n                    <Button\n                        color='primary'\n                        variant='outlined'\n                        onClick={() => setOpenDialog({ open: false })}\n                    >\n                        <Typography>\n                            <FormattedMessage id='Settings.Alerts.Alerts.close.btn' defaultMessage='Close' />\n                        </Typography>\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog open={unsubscribeAll}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeading}>\n                        <FormattedMessage\n                            id='Settings.Alerts.Alerts.unsubscribe.confirm.dialog.heading'\n                            defaultMessage='Confirm unsubscription from All Alerts'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Settings.Alerts.Alerts.unsubscribe.confirm.dialog.message'\n                            defaultMessage={'This will remove all the existing alert subscriptions and emails. This' +\n                            ' action cannot be undone.'}\n                        />\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        color='primary'\n                        size='small'\n                        onClick={() => {\n                            handleUnSubscribe();\n                            setUnsubscribeAll(false);\n                        }}\n                    >\n                        <Typography>\n                            <FormattedMessage\n                                id='Settings.Alerts.Alerts.confirm.btn'\n                                defaultMessage='Unsubscribe All'\n                            />\n                        </Typography>\n                    </Button>\n                    <Button\n                        color='secondary'\n                        size='small'\n                        onClick={() => setUnsubscribeAll(false)}\n                    >\n                        <Typography>\n                            <FormattedMessage id='Settings.Alerts.Alerts.cancel.btn' defaultMessage='Cancel' />\n                        </Typography>\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n};\n\nAlerts.propTypes = {\n    classes: PropTypes.shape({\n        configDialogHeading: PropTypes.string.isRequired,\n        chipInput: PropTypes.string.isRequired,\n        btnContainer: PropTypes.string.isRequired,\n        alertsWrapper: PropTypes.string.isRequired,\n        manageAlertHeading: PropTypes.string.isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func.isRequired,\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Alerts));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { Grid, withStyles } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport Alerts from './Alerts/Alerts';\n\n\nconst styles = theme => ({\n    settingsRoot: {\n        padding: theme.spacing(),\n        width: '100%',\n    },\n});\n\n/**\n * @param {any} props sdf\n * @return {any} dds\n * */\nfunction Settings(props) {\n    const { classes } = props;\n    return (\n        <div className={classes.settingsRoot}>\n            <Grid container direction='column' spacing={2}>\n                <Grid item>\n                    <Alerts />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nSettings.propTypes = {\n    classes: PropTypes.shape({\n        settingsRoot: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default withStyles(styles)(Settings);\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { Typography, withStyles, Container } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Settings from './Settings';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n        width: '100%',\n    },\n    headingWrapper: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: theme.spacing(),\n        '& span, & h5, & label, & input, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.default),\n        },\n    },\n});\n\nfunction SettingsBase(props) {\n    const { classes } = props;\n    return (\n        <Container fixed>\n            <div className={classes.headingWrapper}>\n                <Typography variant='h5'>\n                    <FormattedMessage\n                        id='Apis.Settings.SettingsBase.header'\n                        defaultMessage='Settings'\n                    />\n                </Typography>\n                <Typography variant='caption'>\n                    <FormattedMessage\n                        id='Apis.Settings.SettingsBase.sub.header'\n                        defaultMessage='View and Configure Developer Portal Settings'\n                    />\n                </Typography>\n            </div>\n            <Settings />\n        </Container>\n    );\n}\n\nSettingsBase.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(SettingsBase);\n"],"sourceRoot":""}