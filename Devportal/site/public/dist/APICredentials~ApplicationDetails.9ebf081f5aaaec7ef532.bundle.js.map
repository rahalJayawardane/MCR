{"version":3,"sources":["webpack:///./source/src/app/components/Shared/ScopeValidation.jsx","webpack:///./source/src/app/data/Subscription.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ProvideOAuthKeys.jsx","webpack:///./override/src/app/components/Shared/AppsAndKeys/OBConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx"],"names":["resourcePaths","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","APPLICATIONS","SINGLE_APPLICATION","APPLICATION_GENERATE_KEYS","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","SINGLE_SUBSCRIPTION","SUBSCRIPTIONS","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","resourceMethods","POST","PUT","GET","DELETE","ScopeValidation","React","Component","constructor","props","super","this","state","componentDidMount","resourcePath","resourceMethod","hasScope","AuthManager","hasScopes","then","haveScope","setState","render","children","propTypes","PropTypes","node","isRequired","string","Subscription","Resource","client","APIClientFactory","getAPIClient","Utils","getEnvironment","label","getSubscriptions","apiId","applicationId","limit","apis","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","ProvideOAuthKeys","classes","consumerKey","consumerSecret","intl","onChange","isUserOwner","handleChange","event","Grid","container","spacing","direction","item","xs","TextField","id","name","className","textField","formatMessage","defaultMessage","value","e","margin","fullWidth","disabled","variant","FormControl","FormHelperText","shape","func","defaultProps","injectIntl","withStyles","theme","marginTop","paddingTop","paddingBottom","paddingLeft","width","FormControlOdd","padding","button","marginLeft","quotaHelp","position","checkboxWrapper","display","checkboxWrapperColumn","flexDirection","group","removeHelperPadding","isOrgIdError","setOrgIdError","useState","isSPCertError","setSPCertError","field","keyRequest","updateKeyRequest","setGenerateEnabled","newRequest","target","currentTarget","orgId","customOrgIdRegexString","Settings","openbanking","orgIdRegex","defaultOrgIdRegex","RegExp","customOrgIdRegex","maxInputLength","undefined","maxAllowedInputLength","length","test","isInvalidOrgId","organizationId","isInvalidCert","spCertificate","isOrgIdEnabled","isRegulatoryApp","keys","hasKeysGenerated","spCert","decodeURIComponent","escape","md","root","multiline","rows","defaultValue","atob","JSON","parse","trim","helperText","Typography","error","inputProps","useStyles","makeStyles","code","marginBottom","background","palette","grey","color","flex","command","encodeVisible","cursor","textDecoration","contentWrapper","ViewCurl","bas64Encoded","window","btoa","settings","apiGatewayEndpoint","useContext","showReal","setShowReal","tokenCopied","setTokenCopied","onCopy","setTimeout","applyReal","tokenURL","split","Fragment","onClick","Tooltip","title","placement","text","ViewKeys","accessTokenRequest","that","elementName","data","preventDefault","open","showToken","keyType","applicationPromise","application","regenerateSecret","response","console","log","showSecretGen","secretGenResponse","catch","status","notFound","showCurl","isKeyJWT","isUpdating","generateToken","timeout","scopesSelected","tokenResponse","token","accessToken","tokenScopes","tokenValidityTime","validityTime","selectedApp","hashEnabled","keyCopied","secretCopied","showCS","copyWrapper","InputProps","readOnly","endAdornment","InputAdornment","iconStyle","Icon","Button","handleSecretRegenerate","type","IconButton","handleShowHidden","onMouseDown","handleMouseDownGeneric","appId","Application","get","subscriptionScopes","getKeys","map","scope","key","componentDidUpdate","prevProps","fullScreen","tokenType","selectedGrantTypes","summary","ResourceNotFound","Loading","csCkKeys","accessTokenScopes","validityPeriod","tokenDetails","dialogHead","gridWrapper","viewKeyAndSecret","inputWrapper","InputLabel","htmlFor","join","Dialog","includes","onClose","handleClose","aria-labelledby","dialogWrapper","DialogTitle","DialogContent","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","ViewSecret","secret","DialogActions","CircularProgress","size","generateAccessToken","autoFocus","tokenSection","handleClickOpen","handleClickOpenCurl","gutterBottom","bool","getContrastText","default","alignItems","fontSize","paper","marginRight","keyState","states","message","REJECTED","noKeysRoot","backgroundImage","app","context","custom","overviewPage","keysBackground","height","backgroundPosition","backgroundRepeat","backgroundSize","minHeight","TokenManagerSummary","keyStates","emptyBox","component","CREATED","WaitingForApproval","keyGrantTypes","supportedGrantTypes","TokenManager","generateEnabled","API","getSettings","newKeyRequest","isRegulatory","serverSupportedGrantTypes","Object","grantTypes","filter","obj","getserverSupportedGrantTypes","callbackUrl","isLoading","providedConsumerKey","providedConsumerSecret","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","provideOAuthKeySecret","loadApplication","updateSubscriptionData","certContent","newKeys","Map","set","Alert","info","finally","applicationKey","provideKeys","getOrgIDEnabled","spec","toLowerCase","username","getUser","owner","Progress","cleanUpInfoText","cleanUpButton","settingsContext","mapExistingAuthApps","Paper","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","heading","ExpansionPanelDetails","keyConfigWrapper","KeyConfiguration","isKeysAvailable","additionalProperties","generateWrapper","instanceOf","primary","main"],"mappings":"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","file":"APICredentials~ApplicationDetails.9ebf081f5aaaec7ef532.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n}\n\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    textField: {\n        marginTop: 0,\n    },\n});\n\n/**\n * Provide Consumer Key and Secret of existing Auth apps\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nfunction ProvideOAuthKeys(props) {\n    const {\n        classes, consumerKey, consumerSecret, intl, onChange, isUserOwner,\n    } = props;\n\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n\n    return (\n        <div>\n            <Grid container spacing={3} direction='column'>\n                <Grid item xs={6}>\n                    <TextField\n                        id='provided-consumer-key'\n                        name='providedConsumerKey'\n                        className={classes.textField}\n                        label={intl.formatMessage({\n                            defaultMessage: 'Consumer Key',\n                            id: 'Shared.AppsAndKeys.ProvideOAuthKeys.consumer.key',\n                        })}\n                        value={consumerKey}\n                        onChange={e => handleChange(e)}\n                        margin='normal'\n                        fullWidth\n                        disabled={!isUserOwner}\n                        variant='outlined'\n                    />\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ProvideOAuthKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the OAuth application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <TextField\n                        id='provided-consumer-secret'\n                        name='providedConsumerSecret'\n                        label={intl.formatMessage({\n                            defaultMessage: 'Consumer Secret',\n                            id: 'Shared.AppsAndKeys.ProvideOAuthKeys.consumer.secret',\n                        })}\n                        className={classes.textField}\n                        value={consumerSecret}\n                        onChange={e => handleChange(e)}\n                        margin='normal'\n                        fullWidth\n                        disabled={!isUserOwner}\n                        variant='outlined'\n                    />\n                    <FormControl>\n                        <FormHelperText id='consumer-secret-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ProvideOAuthKeys.consumer.secret.of.application'\n                                defaultMessage='Consumer Secret of the OAuth application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nProvideOAuthKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n};\n\nProvideOAuthKeys.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n};\n\nexport default injectIntl(withStyles(styles)(ProvideOAuthKeys));\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n *\n * This software is the property of WSO2 Inc. and its suppliers, if any.\n * Dissemination of any information or reproduction of any material contained\n * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n * the WSO2 Commercial License available at http://wso2.com/licenses.\n * For specific language governing the permissions and limitations under this\n * license, please see the license as well as any agreement you’ve entered into\n * with WSO2 governing the purchase of this software and any associated services.\n *\n */\n\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Settings from 'Settings';\n\n\nconst styles = (theme) => ({\n    FormControl: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n});\n\nconst isInvalidOrgId = (orgId) => {\n    const defaultOrgIdRegexString = '^PSD[A-Z]{2}-[A-Z]{2,8}-[[a-zA-Z0-9]*$';\n    const customOrgIdRegexString = Settings.openbanking.orgIdRegex;\n    const defaultOrgIdRegex = new RegExp(defaultOrgIdRegexString);\n    const customOrgIdRegex = new RegExp(Settings.openbanking.orgIdRegex);\n\n    let maxInputLength;\n\n    if (Settings.openbanking.maxAllowedInputLength !== undefined) {\n        maxInputLength = Settings.openbanking.maxAllowedInputLength;\n    } else {\n        maxInputLength = 20;\n    }\n\n    /* If a custom regex is configured, validate using the configured regex, otherwise, validate with default regex.\n       If a max input length is not defined, the default max input length is 20. */\n    if (customOrgIdRegexString !== undefined && (maxInputLength >= orgId.length)) {\n        return (orgId == null || !(customOrgIdRegex.test(orgId)));\n    } else {\n        return (orgId == null || !(defaultOrgIdRegex.test(orgId)));\n    }\n};\n/**\n *\n *\n * @class OBConfiguration\n * @extends {React.Component}\n */\nconst OBConfiguration = (props) => {\n    const [isOrgIdError, setOrgIdError] = useState(false);\n    const [isSPCertError, setSPCertError] = useState(false);\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const { keyRequest, updateKeyRequest, setGenerateEnabled } = props;\n        const newRequest = { ...keyRequest };\n        const { target: currentTarget } = event;\n\n        switch (field) {\n            case 'organizationId':\n                if (isInvalidOrgId(currentTarget.value)) {\n                    setOrgIdError(true);\n                    setGenerateEnabled(false);\n                } else {\n                    setOrgIdError(false);\n                    setGenerateEnabled(true);\n                }\n                newRequest.organizationId = currentTarget.value;\n                break;\n            case 'certificate':\n                // eslint-disable-next-line no-use-before-define\n                if (isInvalidCert(currentTarget.value)) {\n                    setSPCertError(true);\n                    setGenerateEnabled(false);\n                } else {\n                    setSPCertError(false);\n                    setGenerateEnabled(true);\n                }\n                newRequest.spCertificate = currentTarget.value;\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const {\n        classes, isOrgIdEnabled, isRegulatoryApp, keys, hasKeysGenerated,\n    } = props;\n    const isInvalidCert = (spCert) => {\n        if (spCert == null) {\n            return true;\n        }\n        try {\n            // Try to convert to utf-8\n            decodeURIComponent(escape(spCert));\n            // If the conversion succeeds, text is not utf-8\n            return false;\n        } catch (e) {\n            return true;\n        }\n    };\n\n\n    return (\n\n        <div>\n            <Grid item xs={10} md={5}>\n                {isRegulatoryApp ? (\n                    <TextField\n                        classes={{\n                            root: classes.removeHelperPadding,\n                        }}\n                        fullWidth\n                        id='certificate'\n                        label={(\n                            <FormattedMessage\n                                defaultMessage='Application Certificate'\n                                id='Shared.AppsAndKeys.OBConfiguration.certification.content.label'\n                            />\n                        )}\n                        multiline\n                        rows='10'\n                        defaultValue={keys ? atob(JSON.parse(keys).spCert.trim()) : ''}\n                        name='certificate'\n                        onChange={(e) => handleChange('certificate', e)}\n                        helperText={\n                            isSPCertError\n                                ? (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            defaultMessage='Make sure to remove the &quot;\n                                            -----BEGIN CERTIFICATE-----&quot;\n                                            and &quot;-----END CERTIFICATE-----&quot; from the certificate content'\n                                            id='Shared.AppsAndKeys.OBConfiguration.\n                                            certification.content.helper.error'\n                                        />\n                                    </Typography>\n                                )\n                                : (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            defaultMessage='The application certificate in PEM format<br>NOTE:\n                                            Make sure to remove the \\\"-----BEGIN CERTIFICATE-----\\\" and\n                                            \\\"-----END CERTIFICATE-----\\\" from the certificate content'\n                                            id='Shared.AppsAndKeys.OBConfiguration.certification.content.helper'\n                                        />\n                                    </Typography>\n                                )\n                        }\n                        margin='normal'\n                        variant='outlined'\n                        error={isSPCertError}\n                        inputProps={{\n                            disabled: hasKeysGenerated,\n                        }}\n                    />\n                ) : null}\n            </Grid>\n            <Grid item xs={10} md={5}>\n                {(isRegulatoryApp && isOrgIdEnabled) ? (\n                    <TextField\n                        classes={{\n                            root: classes.removeHelperPadding,\n                        }}\n                        fullWidth\n                        id='orgId'\n                        label={(\n                            <FormattedMessage\n                                defaultMessage='Organization ID'\n                                id='Shared.AppsAndKeys.OBConfiguration.organization.id.label'\n                            />\n                        )}\n                        defaultValue={keys ? JSON.parse(keys).orgId.trim() : ''}\n                        name='orgId'\n                        onChange={(e) => handleChange('organizationId', e)}\n                        helperText={\n                            isOrgIdError\n                                ? (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            defaultMessage='Organization identifier cannot be empty or invalid'\n                                            id='Shared.AppsAndKeys.OBConfiguration.org.id.content.helper.error'\n                                        />\n                                    </Typography>\n                                )\n                                : (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            defaultMessage='Organization Identifier as provided in the\n                                            eIDAS certificate. E.g. PSDUK-NCA-OrganizationID'\n                                            id='Shared.AppsAndKeys.OBConfiguration.org.id.content.helper'\n                                        />\n                                    </Typography>\n                                )\n                        }\n                        margin='normal'\n                        variant='outlined'\n                        error={isOrgIdError}\n                        inputProps={{\n                            disabled: hasKeysGenerated,\n                        }}\n                    />\n                ) : null}\n            </Grid>\n        </div>\n    );\n};\n\n\nexport default injectIntl(withStyles(styles)(OBConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Settings from 'AppComponents/Shared/SettingsContext';\n\nconst useStyles = makeStyles(theme => ({\n    code: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n    command: {\n        color: '#2b62b0',\n    },\n    encodeVisible: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n    contentWrapper: {\n        display: 'flex',\n    },\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n    const classes = useStyles();\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const { settings: { apiGatewayEndpoint } } = useContext(Settings);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n\n    const gatewayUrl = apiGatewayEndpoint ? apiGatewayEndpoint.split(',')[0] : 'https://localhost:8243';\n    const tokenURL = `${gatewayUrl}/token`;\n\n    return (\n        <React.Fragment>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help'\n                    defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                />\n            </Typography>\n\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenURL}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=password&username=Username&password=Password\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip\n                        title={\n                            tokenCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenURL} -d ` +\n                            '\"grant_type=password&username=Username&password=Password\" -H ' +\n                            `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                    defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                />\n            </Typography>\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenURL}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=client_credentials\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip title={tokenCopied ? 'Copied' : 'Copy to clipboard'} placement='right'>\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenURL} -d ` +\n                            '\"grant_type=client_credentials\" -H' +\n                            `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst styles = (theme) => ({\n    button: {\n        margin: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    inputWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    copyWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    gridWrapper: {\n        paddingTop: theme.spacing(2),\n    },\n    iconStyle: {\n        cursor: 'grab',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(0.5),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    dialogWrapper: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    }\n});\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                this.setState({ isUpdating: false });\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret) => {\n        const { classes, intl, selectedApp: { hashEnabled }, keyType } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='normal'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                            className={classes.iconStyle}\n                                        >\n                                            <CopyToClipboard\n                                                text={consumerKey}\n                                                onCopy={() => this.onCopy('keyCopied')}\n                                            >\n                                                <Icon\n                                                    color='secondary'\n                                                >\n                                                    description\n                                                        </Icon>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </div>\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='normal'\n                                fullWidth\n                                variant='outlined'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes=''\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={secretCopied ? 'Copied' : 'Copy to clipboard'}\n                                                placement='right'\n                                                className={classes.iconStyle}\n                                            >\n                                                <CopyToClipboard\n                                                    text={consumerSecret}\n                                                    onCopy={() => this.onCopy('secretCopied')}\n                                                >\n                                                    <Icon color='secondary'>description</Icon>\n                                                </CopyToClipboard>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    className={classes.button}\n                                    onClick={() => this.handleSecretRegenerate(consumerKey, keyType)}\n                                    disabled={!isUserOwner}\n                                >\n                                    <FormattedMessage\n                                        defaultMessage='Regenerate Consumer Secret'\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                    />\n                                </Button>\n                            )}\n                    </div>\n                    {!hashEnabled && (\n                        <FormControl>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, classes, fullScreen, keys, selectedApp: { tokenType, hashEnabled }, selectedGrantTypes, isUserOwner, summary, isRegulatoryApp\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.get(keyType);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(keyType) && keys.get(keyType).token) {\n            ({ accessToken } = keys.get(keyType).token);\n            accessTokenScopes = keys.get(keyType).token.tokenScopes;\n            validityPeriod = keys.get(keyType).token.validityTime;\n            tokenDetails = keys.get(keyType).token;\n        }\n\n        let dialogHead = 'Undefined';\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3} className={classes.gridWrapper}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret)}\n                </Grid>\n            );\n        }\n        return consumerKey && (\n            <div className={classes.inputWrapper}>\n                <Grid container spacing={3} className={classes.gridWrapper}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret)}\n                    {(accessToken && tokenType !== 'JWT' && !hashEnabled) && (\n                        <Grid item xs={6}>\n                            <InputLabel htmlFor='adornment-amount'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.access.token'\n                                    defaultMessage='Access Token'\n                                />\n                            </InputLabel>\n                            <div className={classes.copyWrapper}>\n                                <TextField\n                                    id='access-token'\n                                    value={accessToken}\n                                    margin='normal'\n                                    variant='outlined'\n                                    fullWidth\n                                    InputProps={{\n                                        readOnly: true,\n                                        endAdornment: (\n                                            <InputAdornment position='end'>\n                                                <Tooltip\n                                                    title={tokenCopied ? 'Copied' : 'Copy to clipboard'}\n                                                    placement='right'\n                                                >\n                                                    <CopyToClipboard\n                                                        text={accessToken}\n                                                        onCopy={() => this.onCopy('tokenCopied')}\n                                                    >\n                                                        <Icon color='secondary'>description</Icon>\n                                                    </CopyToClipboard>\n                                                </Tooltip>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                            </div>\n                            <FormControl>\n                                <FormHelperText id='access-token-helper-text'>\n                                    {`Above token has a validity period of ${validityPeriod} seconds.\n                                            And the token has (${accessTokenScopes.join(', ')}) scopes.`}\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    )}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || isKeyJWT) && selectedGrantTypes.includes('client_credentials')}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl keys={{ consumerKey, consumerSecret }} />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button onClick={this.generateAccessToken} color='primary' disabled={isUpdating}>\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button onClick={this.handleClose} color='primary' autoFocus>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && !isRegulatoryApp && (\n                            <div className={classes.tokenSection}>\n                                <Button\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpen}\n                                    disabled={!selectedGrantTypes.includes('client_credentials')}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                        defaultMessage='Generate Access Token'\n                                    />\n                                </Button>\n                                <Button\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {!selectedGrantTypes.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(ViewKeys));\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n});\n\nconst waitingForApproval = (props) => {\n    const {\n        classes, keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <div className={classes.root}>{message}</div>;\n};\n\nexport default injectIntl(withStyles(styles)(waitingForApproval));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    noKeysRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.keysBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const classes = useStyles();\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n *\n * This software is the property of WSO2 Inc. and its suppliers, if any.\n * Dissemination of any information or reproduction of any material contained\n * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n * the WSO2 Commercial License available at http://wso2.com/licenses.\n * For specific language governing the permissions and limitations under this\n * license, please see the license as well as any agreement you’ve entered into\n * with WSO2 governing the purchase of this software and any associated services.\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Icon from '@material-ui/core/Icon';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Alert from 'AppComponents/Shared/Alert';\nimport ProvideOAuthKeys from 'AppComponents/Shared/AppsAndKeys/ProvideOAuthKeys';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport Settings from 'AppComponents/Shared/SettingsContext';\nimport API from 'AppData/api';\nimport OBConfiguration from '/Users/rahal/Rahal/setups/OB/UK/MCR/200/wso2-obam-2.0.0/repository/deployment/server/jaggeryapps/devportal/override/src/app/components/Shared/AppsAndKeys/OBConfiguration.jsx';\nimport { openbanking } from 'Settings';\nimport KeyConfiguration from './KeyConfiguration';\n\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        '& span, & h5, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    button: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        }\n    },\n    cleanUpButton: {\n        marginLeft: 15,\n    },\n    cleanUpInfoText: {\n        padding: '10px 0px 10px 15px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n    paper: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n});\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            keyRequest: {\n                keyType,\n                serverSupportedGrantTypes: [],\n                supportedGrantTypes: [],\n                callbackUrl: '',\n                validityTime: 3600,\n            },\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            generateEnabled: true,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.isRegulatoryApp = selectedApp.isRegulatory;\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n\n    setGenerateEnabled = (state) => {\n        this.setState({ generateEnabled: state });\n    }\n\n    /**\n     * get supported grant types from the settings api\n     */\n    getserverSupportedGrantTypes = () => {\n        const api = new API();\n        const promisedSettings = api.getSettings();\n        promisedSettings\n            .then((response) => {\n                const { keyRequest } = this.state;\n                const newKeyRequest = { ...keyRequest };\n\n                const { selectedApp } = this.props;\n\n                if (selectedApp.isRegulatory) {\n                    newKeyRequest.serverSupportedGrantTypes = Object.keys(openbanking.grantTypes).filter((value) => response.obj.grantTypes.includes(value));\n                    newKeyRequest.supportedGrantTypes = Object.keys(openbanking.grantTypes).filter((value) => response.obj.grantTypes.includes(value));\n                } else {\n                    newKeyRequest.serverSupportedGrantTypes = response.obj.grantTypes;\n                    newKeyRequest.supportedGrantTypes = response.obj.grantTypes.filter((item) => item !== 'authorization_code'\n                        && item !== 'implicit');\n                }\n                this.setState({ keyRequest: newKeyRequest });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        this.getserverSupportedGrantTypes();\n        if (this.appId) {\n            this.application\n                .then((application) => application.getKeys())\n                .then((keys) => {\n                    const { keyType } = this.props;\n                    const { keyRequest } = this.state;\n                    if (keys.size > 0 && keys.get(keyType)) {\n                        const { callbackUrl, supportedGrantTypes } = keys.get(keyType);\n                        const newRequest = {\n                            ...keyRequest, callbackUrl, supportedGrantTypes,\n                        };\n                        this.setState({ keys, keyRequest: newRequest });\n                    } else {\n                        this.setState({ keys });\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.error(error);\n                    }\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys } = this.state;\n        this.setState({ isLoading: true });\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n        this.application\n            .then((application) => {\n                let orgId = keyRequest.organizationId != null ? keyRequest.organizationId : null;\n                let certContent = keyRequest.spCertificate != null ? btoa(keyRequest.spCertificate.trim()) : null;\n                return application.generateKeys(\n                    keyType, keyRequest.supportedGrantTypes,\n                    keyRequest.callbackUrl, keyRequest.validityTime,\n                    '{ \\\"orgId\\\": \\\"' + orgId + '\\\", \\\"spCert\\\": \\\"'\n                    + certContent + '\\\" }',\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(keyType, response);\n                this.setState({ keys: newKeys, isKeyJWT });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                    defaultMessage: 'Application keys generated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                    defaultMessage: 'Error occurred when generating application keys',\n                }));\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        this.setState({ isLoading: true });\n        const { keys, keyRequest } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = keys.get(keyType);\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.supportedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                );\n            })\n            .then((response) => {\n                this.setState({ keys: response.keys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.error',\n                    defaultMessage: 'Error occurred when updating application keys',\n                }));\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys() {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { providedConsumerKey, providedConsumerSecret } = this.state;\n        const { keyType, intl } = this.props;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                    defaultMessage: 'Error occurred when providing application keys',\n                }));\n            });\n    }\n\n    getOrgIDEnabled() {\n        if (openbanking.spec.toLowerCase() === 'uk') {\n            return false;\n        } else {\n            return openbanking.spec.toLowerCase() === 'berlin';\n        }\n    }\n\n\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            classes, selectedApp, keyType, summary,\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, generateEnabled,\n        } = this.state;\n        if (!keys) {\n            return <Loading />;\n        }\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.get(keyType);\n        if (key && key.token) {\n            keyRequest.validityTime = key.token.validityTime;\n        }\n        if (summary) {\n            if (keys) {\n                return (\n                    <TokenMangerSummary\n                        keys={keys}\n                        key={key}\n                        keyStates={this.keyStates}\n                        selectedApp={selectedApp}\n                        keyType={keyType}\n                        isKeyJWT={isKeyJWT}\n                        isUserOwner={isUserOwner}\n                    />\n                );\n            } else {\n                return (<Progress />);\n            }\n        }\n        if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={this.cleanUpKeys}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <WaitingForApproval keyState={key.keyState} states={this.keyStates} />;\n        }\n        // todo replace use of localStorage with useContext\n        // const settingsData = localStorage.getItem('settings');\n        // const { mapExistingAuthApps } = JSON.parse(settingsData);\n        const keyGrantTypes = key ? key.supportedGrantTypes : [];\n        const settingsContext = this.context;\n        const { mapExistingAuthApps } = settingsContext.settings;\n        const isOrgIdEnabled = this.getOrgIDEnabled();\n        const isRegulatory = this.isRegulatoryApp;\n        return (\n            <div className={classes.root}>\n                <Typography variant='h5'>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        defaultMessage='Key and Secret'\n                        id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                    />\n                </Typography>\n                <ViewKeys\n                    selectedApp={selectedApp}\n                    keyType={keyType}\n                    keys={keys}\n                    isKeyJWT={isKeyJWT}\n                    selectedGrantTypes={keyGrantTypes}\n                    isUserOwner={isUserOwner}\n                    isRegulatoryApp={isRegulatory}\n                />\n                <Paper className={classes.paper}>\n                    <ExpansionPanel defaultExpanded>\n                        <ExpansionPanelSummary expandIcon={<Icon>expand_more</Icon>}>\n                            <Typography className={classes.heading} variant='subtitle1'>\n                                {\n                                    keys.size > 0 && keys.get(keyType)\n                                        ? (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configurations'\n                                                id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configuration'\n                                                id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                            />\n                                        )\n                                }\n                            </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails className={classes.keyConfigWrapper}>\n                            <KeyConfiguration\n                                keys={keys}\n                                selectedApp={selectedApp}\n                                keyType={keyType}\n                                updateKeyRequest={this.updateKeyRequest}\n                                keyRequest={keyRequest}\n                                isUserOwner={isUserOwner}\n                                isKeysAvailable={keys.size > 0 && keys.get(keyType)}\n                                setGenerateEnabled={this.setGenerateEnabled}\n                                isRegulatoryApp={isRegulatory}\n                            />\n                        </ExpansionPanelDetails>\n                        <ExpansionPanelDetails className={classes.keyConfigWrapper}>\n                            <OBConfiguration\n                                selectedApp={selectedApp}\n                                keyType={keyType}\n                                updateKeyRequest={this.updateKeyRequest}\n                                keyRequest={keyRequest}\n                                isOrgIdEnabled={isOrgIdEnabled}\n                                setGenerateEnabled={this.setGenerateEnabled}\n                                isRegulatoryApp={isRegulatory}\n                                keys={keys.size > 0 && keys.get(keyType) ? keys.get(keyType).additionalProperties : null}\n                                hasKeysGenerated={keys.size > 0 && keys.get(keyType)}\n                            />\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                    <div className={classes.generateWrapper}>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                            resourceMethod={resourceMethods.POST}\n                        >\n                            {!isUserOwner ? (\n                                <>\n                                    <Button\n                                        variant='contained'\n                                        color='primary'\n                                        className={classes.button}\n                                        onClick={\n                                            keys.size > 0 && keys.get(keyType) ? this.updateKeys : this.generateKeys\n                                        }\n                                        disabled={!isUserOwner || isLoading}\n                                    >\n                                        {keys.size > 0 && keys.get(keyType) ? 'Update keys' : 'Generate Keys'}\n                                        {isLoading && <CircularProgress size={20} />}\n                                    </Button>\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            defaultMessage='Only owner can generate or update keys'\n                                            id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                        />\n                                    </Typography>\n                                </>\n                            ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    className={classes.button}\n                                    onClick={keys.size > 0 && keys.get(keyType) ? this.updateKeys : this.generateKeys}\n                                    disabled={!generateEnabled || isLoading}\n                                >\n                                    {keys.size > 0 && keys.get(keyType) ? 'Update' : 'Generate Keys'}\n                                    {isLoading && <CircularProgress size={20} />}\n                                </Button>\n                            )}\n                        </ScopeValidation>\n                    </div>\n                </Paper>\n                {\n                    mapExistingAuthApps && !keys.get(keyType) && (\n                        <Paper className={classes.paper}>\n                            <ExpansionPanel defaultExpanded>\n                                <ExpansionPanelSummary expandIcon={<Icon>expand_more</Icon>}>\n                                    <Typography className={classes.heading} variant='subtitle1'>\n                                        <FormattedMessage\n                                            defaultMessage='Provide Existing OAuth Keys'\n                                            id='Shared.AppsAndKeys.TokenManager.provide.oauth'\n                                        />\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails className={classes.keyConfigWrapper}>\n                                    <ProvideOAuthKeys\n                                        onChange={this.handleOnChangeProvidedOAuth}\n                                        consumerKey={providedConsumerKey}\n                                        consumerSecret={providedConsumerSecret}\n                                        isUserOwner={isUserOwner}\n                                    />\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <div className={classes.generateWrapper}>\n                                <ScopeValidation\n                                    resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                    resourceMethod={resourceMethods.POST}\n                                >\n                                    {!isUserOwner ? (\n                                        <>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.button}\n                                                onClick={this.provideOAuthKeySecret}\n                                                disabled={!isUserOwner}\n                                            >\n                                                {\n                                                    keys.size > 0 && keys.get(keyType)\n                                                        ? (\n                                                            <FormattedMessage\n                                                                defaultMessage='Update'\n                                                                id='Shared.AppsAndKeys.TokenManager.provide.\n                                                                oauth.button.update'\n                                                            />\n                                                        )\n                                                        : (\n                                                            <FormattedMessage\n                                                                defaultMessage='Provide'\n                                                                id='Shared.AppsAndKeys.TokenManager.\n                                                                provide.oauth.button.provide'\n                                                            />\n                                                        )\n                                                }\n                                            </Button>\n                                            <Typography variant='caption'>\n                                                <FormattedMessage\n                                                    defaultMessage='Only owner can provide keys'\n                                                    id='Shared.AppsAndKeys.TokenManager.key.provide.user.owner'\n                                                />\n                                            </Typography>\n                                        </>\n                                    ) : (\n                                        <Button\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.button}\n                                            onClick={this.provideOAuthKeySecret}\n                                        >\n                                            {\n                                                keys.size > 0 && keys.get(keyType)\n                                                    ? (\n                                                        <FormattedMessage\n                                                            defaultMessage='Update'\n                                                            id='Shared.AppsAndKeys.TokenManager.\n                                                            provide.oauth.button.update'\n                                                        />\n                                                    )\n                                                    : (\n                                                        <FormattedMessage\n                                                            defaultMessage='Provide'\n                                                            id='Shared.AppsAndKeys.\n                                                            TokenManager.provide.oauth.button.provide'\n                                                        />\n                                                    )\n                                            }\n                                        </Button>\n                                    )}\n                                </ScopeValidation>\n                            </div>\n                        </Paper>\n                    )\n                }\n            </div>\n        );\n    }\n}\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => {},\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(TokenManager));\n"],"sourceRoot":""}