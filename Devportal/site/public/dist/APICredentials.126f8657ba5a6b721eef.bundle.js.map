{"version":3,"sources":["webpack:///./source/src/app/components/Shared/GenericDisplayDialog.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/SubscriptionTableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/Credentials.jsx"],"names":["useStyles","makeStyles","theme","appContent","margin","spacing","button","color","palette","getContrastText","primary","main","genericDisplayDialog","props","handleClick","heading","caption","buttonText","classes","className","type","dialogContainer","variant","component","gutterBottom","resourcePath","resourcePaths","APPLICATIONS","resourceMethod","resourceMethods","POST","onClick","subscriptionTableRow","loadInfo","handleSubscriptionDelete","selectedAppId","updateSubscriptionData","selectedKeyType","app","index","applicationOwner","hashEnabled","td","label","policy","status","actionColumn","to","value","id","defaultMessage","CustomIcon","width","height","strokeColor","icon","ScopeValidation","SINGLE_SUBSCRIPTION","DELETE","subscriptionId","onKeyDown","classNames","activeLink","colSpan","selectedWrapper","TokenManager","keyType","selectedApp","appId","owner","propTypes","PropTypes","shape","isRequired","func","string","number","withStyles","padding","background","default","display","alignItems","fontSize","cursor","paddingLeft","textAlign","direction","borderBottom","grey","A200","borderLeft","withTheme","Credentials","React","Component","expanded","subscriptionRequest","applicationId","apiId","throttlingPolicy","throttlingPolicyList","isSubscribing","api","applicationsAvailable","this","context","state","newSubscriptionRequest","tiers","tierName","setState","apiType","intl","Api","subscribe","then","response","body","Alert","info","formatMessage","console","log","updateData","catch","error","history","push","Application","get","result","Subscription","deleteSubscription","componentDidMount","render","subscribedApplications","user","AuthManager","getUser","isOnlyMutualSSL","securityScheme","includes","isOnlyBasicAuth","Grid","container","item","md","lg","Typography","handleExpandClick","titleSub","length","style","isSubscriptionAvailable","pointerEvents","addLinkWrapper","Button","disabled","size","Icon","Paper","elevation","paper","descWrapper","lifeCycleStatus","toLowerCase","InlineMessage","GenericDisplayDialog","goToWizard","generateCredentialWrapper","SUBSCRIPTIONS","credentialBoxWrapper","credentialBox","buttonElm","SubscribeToApi","updateSubscriptionRequest","renderSmall","handleSubscribe","CircularProgress","subsListTitle","subsListDesc","tableMain","th","map","SubscriptionTableRow","key","renderCredentialInfo","ApiContext","contentWrapper","injectIntl","maxWidth","custom","contentAreaWidth","paddingTop","marginLeft","paddingBottom","borderCollapse","marginTop","marginRight","backgroundColor","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","borderTop","expansion","boxShadow","summary","subscribeRoot","A100","appBar","toolbar","subscribeTitle","flex","marginBottom","border","borderRadius"],"mappings":"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","file":"APICredentials.126f8657ba5a6b721eef.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\n\nconst useStyles = makeStyles((theme) => ({\n    appContent: {\n        margin: theme.spacing(2),\n    },\n    button: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n  }));\n\nconst genericDisplayDialog = (props) => {\n    const {\n        handleClick, heading, caption, buttonText,\n    } = props;\n    const classes = useStyles();\n    return (\n        <div className={classes.appContent}>\n            <InlineMessage type='info' className={classes.dialogContainer}>\n                <Typography variant='h5' component='h2'>\n                    {heading}\n                </Typography>\n                <Typography variant=\"body2\" gutterBottom>\n                    {caption}\n                </Typography>\n                <ScopeValidation resourcePath={resourcePaths.APPLICATIONS} resourceMethod={resourceMethods.POST}>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleClick}\n                    >\n                        {buttonText}\n                    </Button>\n                </ScopeValidation>\n            </InlineMessage>\n        </div>\n    );\n};\n\nexport default genericDisplayDialog;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    button: {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    actionColumn: {\n        display: 'flex',\n        textAlign: 'right',\n        direction: 'rtl',\n    },\n    td: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        height: 35,\n    },\n    selectedWrapper: {\n        borderLeft: 'solid 2px ' + theme.palette.primary.main,\n    },\n});\n\nconst subscriptionTableRow = (props) => {\n    const {\n        classes, loadInfo, handleSubscriptionDelete,\n        theme, selectedAppId, updateSubscriptionData, selectedKeyType, app, index, applicationOwner, hashEnabled,\n    } = props;\n    return (\n        <>\n            <tr>\n                <td className={classes.td}>{app.label}</td>\n                <td className={classes.td}>{app.policy}</td>\n                <td className={classes.td}>{app.status}</td>\n                <td className={classes.td}>\n                    <div className={classes.actionColumn}>\n                        <Link\n                            className={classes.button}\n                            to={'/applications/' + app.value}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.manage.app'\n                                    defaultMessage='MANAGE APP'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='applications'\n                            />\n                        </Link>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <a\n                                className={classes.button}\n                                onClick={() => handleSubscriptionDelete(\n                                    app.subscriptionId,\n                                    updateSubscriptionData,\n                                )}\n                                onKeyDown={() => handleSubscriptionDelete(\n                                    app.subscriptionId,\n                                    updateSubscriptionData,\n                                )}\n                            >\n                                <span>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.SubscriptionTableRow.unsubscribe'\n                                        defaultMessage='UNSUBSCRIBE'\n                                    />\n                                </span>\n                                <CustomIcon\n                                    width={16}\n                                    height={16}\n                                    strokeColor={theme.palette.primary.main}\n                                    icon='subscriptions'\n                                />\n                            </a>\n                        </ScopeValidation>\n                        <a\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'PRODUCTION'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('PRODUCTION', app.value)}\n                            onKeyDown={() => loadInfo('PRODUCTION', app.value)}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.prod.keys'\n                                    defaultMessage='PROD KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </a>\n                        <a\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'SANDBOX'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('SANDBOX', app.value)}\n                            onKeyDown={() => loadInfo('SANDBOX', app.value)}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys'\n                                    defaultMessage='SANDBOX KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </a>\n                    </div>\n                </td>\n            </tr>\n            {app.value === selectedAppId && (selectedKeyType === 'PRODUCTION' || selectedKeyType === 'SANDBOX') && (\n                <tr>\n                    <td colSpan='4'>\n                        <div className={classes.selectedWrapper}>\n                            <TokenManager\n                                keyType={selectedKeyType}\n                                selectedApp={{\n                                    appId: app.value,\n                                    label: app.label,\n                                    owner: applicationOwner,\n                                    hashEnabled,\n                                }}\n                                updateSubscriptionData={updateSubscriptionData}\n                            />\n                        </div>\n                    </td>\n                </tr>\n            )}\n        </>\n    );\n};\nsubscriptionTableRow.propTypes = {\n    classes: PropTypes.shape({\n        td: PropTypes.shape({}),\n        actionColumn: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n        activeLink: PropTypes.shape({}),\n        selectedWrapper: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    loadInfo: PropTypes.func.isRequired,\n    selectedAppId: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func.isRequired,\n    selectedKeyType: PropTypes.string.isRequired,\n    applicationOwner: PropTypes.string.isRequired,\n    app: PropTypes.shape({\n        label: PropTypes.string,\n        policy: PropTypes.string,\n        status: PropTypes.string,\n        value: PropTypes.string,\n        subscriptionId: PropTypes.string,\n    }).isRequired,\n    index: PropTypes.number.isRequired,\n};\nexport default withStyles(styles, { withTheme: true })(subscriptionTableRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Subscription from 'AppData/Subscription';\nimport GenericDisplayDialog from 'AppComponents/Shared/GenericDisplayDialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport SubscribeToApi from 'AppComponents/Shared/AppsAndKeys/SubscribeToApi';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { ApiContext } from '../ApiContext';\nimport SubscriptionTableRow from './SubscriptionTableRow';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    generateCredentialWrapper: {\n        marginLeft: 0,\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        }\n    },\n    tableMain: {\n        width: '100%',\n        borderCollapse: 'collapse',\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(1),\n        '& tr td':{\n            paddingLeft: theme.spacing(1),\n        },\n        '& tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '& tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '& th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            borderTop: 'solid 1px ' + theme.palette.grey.A200,\n            textAlign: 'left',\n            fontSize: '11px',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n\n    },\n    expansion: {\n        background: 'transparent',\n        boxShadow: 'none',\n    },\n    summary: {\n        alignItems: 'center',\n    },\n    subscribeRoot: {\n        paddingLeft: theme.spacing(2),\n    },\n    activeLink: {\n        background: theme.palette.grey.A100,\n    },\n    appBar: {\n        background: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n    },\n    subscribeTitle: {\n        flex: 1,\n    },\n    paper: {\n        marginLeft: theme.spacing(3),\n        padding: theme.spacing(2),\n    },\n    descWrapper: {\n        marginBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    credentialBoxWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    credentialBox: {\n        padding: theme.spacing(1),\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    addLinkWrapper: {\n        marginLeft: theme.spacing(2),\n    },\n    subsListTitle: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    subsListDesc: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    buttonElm: {\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n});\n\n/**\n * @class Credentials\n * @extends {React.Component}\n */\nclass Credentials extends React.Component {\n    static contextType = ApiContext;\n\n    state = {\n        expanded: true,\n        selectedAppId: false,\n        selectedKeyType: false,\n        subscriptionRequest: {\n            applicationId: '',\n            apiId: '',\n            throttlingPolicy: '',\n        },\n        throttlingPolicyList: [],\n        applicationOwner: '',\n        hashEnabled: false,\n        isSubscribing: false,\n    };\n\n    /**\n     *  Set the initial values for subscription request\n     */\n    componentDidMount() {\n        const { api, updateSubscriptionData } = this.context;\n        if (api) {\n            this.updateData();\n        } else {\n            updateSubscriptionData(this.updateData);\n        }\n    }\n\n    updateData = () => {\n        const { api, applicationsAvailable } = this.context;\n        const { subscriptionRequest } = this.state;\n        const newSubscriptionRequest = { ...subscriptionRequest, apiId: api.id };\n        const throttlingPolicyList = api.tiers;\n        if (throttlingPolicyList && throttlingPolicyList[0]) {\n            newSubscriptionRequest.throttlingPolicy = throttlingPolicyList[0].tierName;\n        }\n        if (applicationsAvailable && applicationsAvailable[0]) {\n            newSubscriptionRequest.applicationId = applicationsAvailable[0].value;\n        }\n        this.setState({ subscriptionRequest: newSubscriptionRequest, throttlingPolicyList });\n    };\n\n    /**\n     * @memberof Credentials\n     */\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Credentials\n     */\n    handleSubscribe = () => {\n        const { updateSubscriptionData, apiType } = this.context;\n        const { subscriptionRequest } = this.state;\n        const { intl } = this.props;\n        const api = new Api();\n        this.setState({ isSubscribing: true });\n        api.subscribe(\n            subscriptionRequest.apiId,\n            subscriptionRequest.applicationId,\n            subscriptionRequest.throttlingPolicy,\n            apiType,\n        )\n            .then((response) => {\n                if (response.body.status === 'ON_HOLD') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription request has been submitted and is now awaiting approval.',\n                        id: 'subscription.pending',\n                    }));\n                } else {\n                    console.log('Subscription created successfully with ID : ' + response.body.subscriptionId);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscribed successfully',\n                        id: 'Apis.Details.Credentials.Credentials.subscribed.successfully',\n                    }));\n                }\n                if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n                this.setState({ isSubscribing: false });\n            })\n            .catch((error) => {\n                console.log('Error while creating the subscription.');\n                console.error(error);\n                this.setState({ isSubscribing: false });\n            });\n    };\n\n    /**\n     * @inheritdoc\n     * @memberof Credentials\n     */\n    goToWizard = () => {\n        const { history } = this.props;\n        history.push('credentials/wizard');\n    };\n\n    /**\n     * used to load the token manager component when\n     * key type is selected in the applicaiton list\n     * @param {*} selectedKeyType key type\n     * @param {*} selectedAppId  application id\n     * @memberof Credentials\n     */\n    loadInfo = (selectedKeyType, selectedAppId) => {\n        this.setState({ selectedKeyType, selectedAppId });\n\n        Application.get(selectedAppId)\n            .then((result) => {\n                this.setState({ applicationOwner: result.owner, hashEnabled: result.hashEnabled });\n            });\n    };\n\n    /**\n     * Update subscription Request state\n     * @param {Object} subscriptionRequest parameters requried for subscription\n     */\n    updateSubscriptionRequest = (subscriptionRequest) => {\n        this.setState({ subscriptionRequest });\n    };\n\n    /**\n     *\n     * @param {*} subscriptionId subscription id\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete = (subscriptionId, updateSubscriptionData) => {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then((response) => {\n            if (response.status !== 200) {\n                console.log(response);\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Something went wrong while deleting the Subscription!',\n                    id: 'Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription',\n                }));\n                return;\n            }\n            Alert.info(intl.formatMessage({\n                defaultMessage: 'Subscription deleted successfully!',\n                id: 'Apis.Details.Credentials.Credentials.subscription.deleted.successfully',\n            }));\n            if (updateSubscriptionData) updateSubscriptionData();\n        });\n    };\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes, intl } = this.props;\n        const {\n            api, updateSubscriptionData, applicationsAvailable, subscribedApplications,\n        } = this.context;\n        const {\n            selectedKeyType,\n            selectedAppId,\n            subscriptionRequest,\n            throttlingPolicyList,\n            applicationOwner,\n            hashEnabled,\n            isSubscribing,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2') &&\n        !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n        const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2') &&\n         !api.securityScheme.includes('api_key');\n        const renderCredentialInfo = () => {\n            const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n            if (isPrototypedAPI) {\n                return (\n                    <>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Credentials.Credentials.you.do.not.need'\n                                        + '.credentials.to.access.prototyped.api'}\n                                    defaultMessage='You do not need credentials to access Prototyped APIs'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </>\n                );\n            } else if (isOnlyMutualSSL || isOnlyBasicAuth) {\n                return (\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography component='p'>\n                            <FormattedMessage\n                                        id='Apis.Details.Creadentials.credetials.mutualssl'\n                                        defaultMessage={'Subscription is not required for Mutual SSL APIs' + \n                                        ' or APIs with only Basic Authentication.'}\n                                    />\n                            </Typography>\n                        </InlineMessage>\n                );\n            } else if (applicationsAvailable.length === 0 && subscribedApplications.length === 0) {\n                return (\n                    <GenericDisplayDialog\n                        classes={classes}\n                        handleClick={this.goToWizard}\n                        heading={user ? intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.subscribe.to.application',\n                        })\n                            : intl.formatMessage({\n                                defaultMessage: 'Sign In to Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application.sign.in',\n                            })}\n                        caption={intl.formatMessage({\n                            defaultMessage: 'You need to subscribe to an application to access this API',\n                            id:\n                            'Apis.Details.Credentials.Credentials.subscribe.to.application.msg',\n                        })}\n                        buttonText={intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.generate',\n                        })}\n                    />\n                );\n            } else {\n                return (\n                    <>\n                        <div className={classes.generateCredentialWrapper}>\n                            <ScopeValidation\n                                resourcePath={resourcePaths.SUBSCRIPTIONS}\n                                resourceMethod={resourceMethods.POST}\n                            >\n                                <Typography variant='h5'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.' +\n                                        'subscribe.to.application'}\n                                        defaultMessage='Subscribe'\n                                    />\n                                </Typography>\n                                <div className={classes.credentialBoxWrapper}>\n                                    {applicationsAvailable.length === 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.with.wizard.message'}\n                                                    defaultMessage={\n                                                        'Use the Subscription and Key Generation Wizard. '\n                                                        + 'Create a new application -> '\n                                                        + 'Subscribe -> Generate keys and '\n                                                        + 'Access Token to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Link\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth) ? null :\n                                                     `/apis/${api.id}/credentials/wizard`}\n                                                style={!api.isSubscriptionAvailable\n                                                    ? { pointerEvents: 'none' } : null}\n                                            >\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.buttonElm}\n                                                    disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL || \n                                                        isOnlyBasicAuth}\n                                                >\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Credentials.'\n                                                        + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                        defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </div>\n                                    ) }\n                                    {applicationsAvailable.length > 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials'\n                                                    + '.api.credentials.with.subscribe.message'}\n                                                    defaultMessage={'Subscribe to an application'\n                                                    + ' and generate credentials'}\n                                                />\n                                            </Typography>\n                                            <SubscribeToApi\n                                                applicationsAvailable={applicationsAvailable}\n                                                subscriptionRequest={subscriptionRequest}\n                                                throttlingPolicyList={throttlingPolicyList}\n                                                updateSubscriptionRequest={\n                                                    this.updateSubscriptionRequest\n                                                }\n                                                renderSmall\n                                            />\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                onClick={() => this.handleSubscribe()}\n                                                disabled={!api.isSubscriptionAvailable || isSubscribing}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.btn'}\n                                                    defaultMessage='Subscribe'\n                                                />\n                                                {isSubscribing && <CircularProgress size={24} />}\n                                            </Button>\n                                        </div>\n                                    )}\n                                </div>\n                            </ScopeValidation>\n                        </div>\n                        {/*\n                                    ****************************\n                                    Subscription List\n                                    ***************************\n                                    */}\n                        {subscribedApplications && subscribedApplications.length > 0 && (\n                            <>\n                                <Typography variant='h5' className={classes.subsListTitle}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.title'}\n                                        defaultMessage='Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='body2' className={classes.subsListDesc}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.description'}\n                                        defaultMessage='( Applications Subscribed to this Api )'\n                                    />\n                                </Typography>\n                                <table className={classes.tableMain}>\n                                    <tr>\n                                        <th className={classes.th}>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.Credentials.'\n                                                + 'api.credentials.subscribed.apps.name'}\n                                                defaultMessage='Application Name'\n                                            />\n                                        </th>\n                                        <th className={classes.th}>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.Credentials.api.'\n                                                + 'credentials.subscribed.apps.tier'}\n                                                defaultMessage='Throttling Tier'\n                                            />\n                                        </th>\n                                        <th className={classes.th}>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.Credentials.'\n                                                + 'api.credentials.subscribed.apps.status'}\n                                                defaultMessage='Application Status'\n                                            />\n                                        </th>\n                                        <th className={classes.th} />\n                                    </tr>\n                                    {subscribedApplications.map((app, index) => (\n                                        <SubscriptionTableRow\n                                            key={index}\n                                            loadInfo={this.loadInfo}\n                                            handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                            selectedAppId={selectedAppId}\n                                            updateSubscriptionData={updateSubscriptionData}\n                                            selectedKeyType={selectedKeyType}\n                                            app={app}\n                                            index={index}\n                                            applicationOwner={applicationOwner}\n                                            hashEnabled={hashEnabled}\n                                        />\n                                    ))}\n                                </table>\n                            </>\n                        )}\n                    </>\n                );\n            }\n        };\n        return (\n            <Grid container>\n                <Grid item md={12} lg={11}>\n                    <Grid container spacing={5}>\n                        <Grid item md={12}>\n                            <Typography onClick={this.handleExpandClick} variant='h4' className={classes.titleSub}>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.Credentials.api.credentials'\n                                    defaultMessage='Subscriptions'\n                                />\n                                {applicationsAvailable.length > 0 && (\n                                    <Link\n                                        to={(isOnlyMutualSSL || isOnlyBasicAuth) ? null :\n                                             `/apis/${api.id}/credentials/wizard`}\n                                        style={!api.isSubscriptionAvailable\n                                            ? { pointerEvents: 'none' } : null}\n                                        className={classes.addLinkWrapper}\n                                    >\n                                        <Button\n                                            color='primary'\n                                            disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                 || isOnlyBasicAuth}\n                                            size='small'\n                                        >\n                                            <Icon>add_circle_outline</Icon>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.'\n                                                + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                defaultMessage='Subscription &amp; Key Generation Wizard'\n                                            />\n                                        </Button>\n                                    </Link>\n                                )}\n                            </Typography>\n                            <Paper elevation={0} className={classes.paper}>\n                                <Typography variant='body2' className={classes.descWrapper}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.Credentials.'\n                                        defaultMessage={`An application \n                                        is primarily used to decouple the consumer from the APIs. It allows you to \n                                        generate and use a single key for multiple APIs and subscribe multiple times to \n                                        a single API with different SLA levels.`}\n                                    />\n                                </Typography>\n                                {renderCredentialInfo()}\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCredentials.propTypes = {\n    classes: PropTypes.shape({\n        contentWrapper: PropTypes.string,\n        titleSub: PropTypes.string,\n        tableMain: PropTypes.string,\n        th: PropTypes.string,\n        paper: PropTypes.string,\n        descWrapper: PropTypes.string,\n        generateCredentialWrapper: PropTypes.string,\n        credentialBoxWrapper: PropTypes.string,\n        credentialBox: PropTypes.string,\n        buttonElm: PropTypes.string,\n        dialogContainer: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Credentials));\n"],"sourceRoot":""}